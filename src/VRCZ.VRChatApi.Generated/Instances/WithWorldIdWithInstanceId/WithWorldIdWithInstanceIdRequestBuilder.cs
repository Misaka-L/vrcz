// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using VRCZ.VRChatApi.Generated.Instances.WithWorldIdWithInstanceId.ShortName;
using VRCZ.VRChatApi.Generated.Models;
namespace VRCZ.VRChatApi.Generated.Instances.WithWorldIdWithInstanceId
{
    /// <summary>
    /// Builds and executes requests for operations under \instances\{worldId}:{instanceId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithWorldIdWithInstanceIdRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The shortName property</summary>
        public global::VRCZ.VRChatApi.Generated.Instances.WithWorldIdWithInstanceId.ShortName.ShortNameRequestBuilder ShortName
        {
            get => new global::VRCZ.VRChatApi.Generated.Instances.WithWorldIdWithInstanceId.ShortName.ShortNameRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Instances.WithWorldIdWithInstanceId.WithWorldIdWithInstanceIdRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="instanceId">Must be a valid instance ID.</param>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        /// <param name="worldId">Must be a valid world ID.</param>
        public WithWorldIdWithInstanceIdRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter, string instanceId = "", string worldId = "") : base(requestAdapter, "{+baseurl}/instances/{worldId}:{instanceId}{?closedAt*,hardClose*}", pathParameters)
        {
            if (!string.IsNullOrWhiteSpace(instanceId)) PathParameters.Add("instanceId", instanceId);
            if (!string.IsNullOrWhiteSpace(worldId)) PathParameters.Add("worldId", worldId);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Instances.WithWorldIdWithInstanceId.WithWorldIdWithInstanceIdRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithWorldIdWithInstanceIdRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/instances/{worldId}:{instanceId}{?closedAt*,hardClose*}", rawUrl)
        {
        }
        /// <summary>
        /// Close an instance or update the closedAt time when it will be closed.You can only close an instance if the ownerId is yourself or if the instance owner is a group and you have the `group-instance-moderate` permission.
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.Instance"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::VRCZ.VRChatApi.Generated.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::VRCZ.VRChatApi.Generated.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::VRCZ.VRChatApi.Generated.Models.Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::VRCZ.VRChatApi.Generated.Models.Instance?> DeleteAsync(Action<RequestConfiguration<global::VRCZ.VRChatApi.Generated.Instances.WithWorldIdWithInstanceId.WithWorldIdWithInstanceIdRequestBuilder.WithWorldIdWithInstanceIdRequestBuilderDeleteQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::VRCZ.VRChatApi.Generated.Models.Instance> DeleteAsync(Action<RequestConfiguration<global::VRCZ.VRChatApi.Generated.Instances.WithWorldIdWithInstanceId.WithWorldIdWithInstanceIdRequestBuilder.WithWorldIdWithInstanceIdRequestBuilderDeleteQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::VRCZ.VRChatApi.Generated.Models.Error.CreateFromDiscriminatorValue },
                { "403", global::VRCZ.VRChatApi.Generated.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::VRCZ.VRChatApi.Generated.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::VRCZ.VRChatApi.Generated.Models.Instance>(requestInfo, global::VRCZ.VRChatApi.Generated.Models.Instance.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.If an invalid instanceId is provided, this endpoint will simply return &quot;null&quot;!
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.Instance"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::VRCZ.VRChatApi.Generated.Models.Error">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::VRCZ.VRChatApi.Generated.Models.Instance?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::VRCZ.VRChatApi.Generated.Models.Instance> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::VRCZ.VRChatApi.Generated.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::VRCZ.VRChatApi.Generated.Models.Instance>(requestInfo, global::VRCZ.VRChatApi.Generated.Models.Instance.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Close an instance or update the closedAt time when it will be closed.You can only close an instance if the ownerId is yourself or if the instance owner is a group and you have the `group-instance-moderate` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::VRCZ.VRChatApi.Generated.Instances.WithWorldIdWithInstanceId.WithWorldIdWithInstanceIdRequestBuilder.WithWorldIdWithInstanceIdRequestBuilderDeleteQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::VRCZ.VRChatApi.Generated.Instances.WithWorldIdWithInstanceId.WithWorldIdWithInstanceIdRequestBuilder.WithWorldIdWithInstanceIdRequestBuilderDeleteQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns an instance. Please read [Instances Tutorial](https://vrchatapi.github.io/tutorials/instances/) for more information on Instances.If an invalid instanceId is provided, this endpoint will simply return &quot;null&quot;!
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Instances.WithWorldIdWithInstanceId.WithWorldIdWithInstanceIdRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::VRCZ.VRChatApi.Generated.Instances.WithWorldIdWithInstanceId.WithWorldIdWithInstanceIdRequestBuilder WithUrl(string rawUrl)
        {
            return new global::VRCZ.VRChatApi.Generated.Instances.WithWorldIdWithInstanceId.WithWorldIdWithInstanceIdRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Close an instance or update the closedAt time when it will be closed.You can only close an instance if the ownerId is yourself or if the instance owner is a group and you have the `group-instance-moderate` permission.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithWorldIdWithInstanceIdRequestBuilderDeleteQueryParameters 
        {
            /// <summary>The time after which users won&apos;t be allowed to join the instances.If omitted, the instance will be closed immediately.</summary>
            [QueryParameter("closedAt")]
            public DateTimeOffset? ClosedAt { get; set; }
            /// <summary>Whether to hard close the instance. Defaults to false.</summary>
            [QueryParameter("hardClose")]
            public bool? HardClose { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithWorldIdWithInstanceIdRequestBuilderDeleteRequestConfiguration : RequestConfiguration<global::VRCZ.VRChatApi.Generated.Instances.WithWorldIdWithInstanceId.WithWorldIdWithInstanceIdRequestBuilder.WithWorldIdWithInstanceIdRequestBuilderDeleteQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithWorldIdWithInstanceIdRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
