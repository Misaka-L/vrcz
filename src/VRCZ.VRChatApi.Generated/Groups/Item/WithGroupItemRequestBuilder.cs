// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using VRCZ.VRChatApi.Generated.Groups.Item.Announcement;
using VRCZ.VRChatApi.Generated.Groups.Item.AuditLogs;
using VRCZ.VRChatApi.Generated.Groups.Item.Bans;
using VRCZ.VRChatApi.Generated.Groups.Item.Galleries;
using VRCZ.VRChatApi.Generated.Groups.Item.Instances;
using VRCZ.VRChatApi.Generated.Groups.Item.Invites;
using VRCZ.VRChatApi.Generated.Groups.Item.Join;
using VRCZ.VRChatApi.Generated.Groups.Item.Leave;
using VRCZ.VRChatApi.Generated.Groups.Item.Members;
using VRCZ.VRChatApi.Generated.Groups.Item.Permissions;
using VRCZ.VRChatApi.Generated.Groups.Item.Posts;
using VRCZ.VRChatApi.Generated.Groups.Item.Requests;
using VRCZ.VRChatApi.Generated.Groups.Item.Roles;
using VRCZ.VRChatApi.Generated.Models;
namespace VRCZ.VRChatApi.Generated.Groups.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \groups\{groupId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithGroupItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The announcement property</summary>
        public global::VRCZ.VRChatApi.Generated.Groups.Item.Announcement.AnnouncementRequestBuilder Announcement
        {
            get => new global::VRCZ.VRChatApi.Generated.Groups.Item.Announcement.AnnouncementRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The auditLogs property</summary>
        public global::VRCZ.VRChatApi.Generated.Groups.Item.AuditLogs.AuditLogsRequestBuilder AuditLogs
        {
            get => new global::VRCZ.VRChatApi.Generated.Groups.Item.AuditLogs.AuditLogsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The bans property</summary>
        public global::VRCZ.VRChatApi.Generated.Groups.Item.Bans.BansRequestBuilder Bans
        {
            get => new global::VRCZ.VRChatApi.Generated.Groups.Item.Bans.BansRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The galleries property</summary>
        public global::VRCZ.VRChatApi.Generated.Groups.Item.Galleries.GalleriesRequestBuilder Galleries
        {
            get => new global::VRCZ.VRChatApi.Generated.Groups.Item.Galleries.GalleriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The instances property</summary>
        public global::VRCZ.VRChatApi.Generated.Groups.Item.Instances.InstancesRequestBuilder Instances
        {
            get => new global::VRCZ.VRChatApi.Generated.Groups.Item.Instances.InstancesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The invites property</summary>
        public global::VRCZ.VRChatApi.Generated.Groups.Item.Invites.InvitesRequestBuilder Invites
        {
            get => new global::VRCZ.VRChatApi.Generated.Groups.Item.Invites.InvitesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The join property</summary>
        public global::VRCZ.VRChatApi.Generated.Groups.Item.Join.JoinRequestBuilder Join
        {
            get => new global::VRCZ.VRChatApi.Generated.Groups.Item.Join.JoinRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The leave property</summary>
        public global::VRCZ.VRChatApi.Generated.Groups.Item.Leave.LeaveRequestBuilder Leave
        {
            get => new global::VRCZ.VRChatApi.Generated.Groups.Item.Leave.LeaveRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The members property</summary>
        public global::VRCZ.VRChatApi.Generated.Groups.Item.Members.MembersRequestBuilder Members
        {
            get => new global::VRCZ.VRChatApi.Generated.Groups.Item.Members.MembersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The permissions property</summary>
        public global::VRCZ.VRChatApi.Generated.Groups.Item.Permissions.PermissionsRequestBuilder Permissions
        {
            get => new global::VRCZ.VRChatApi.Generated.Groups.Item.Permissions.PermissionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The posts property</summary>
        public global::VRCZ.VRChatApi.Generated.Groups.Item.Posts.PostsRequestBuilder Posts
        {
            get => new global::VRCZ.VRChatApi.Generated.Groups.Item.Posts.PostsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The requests property</summary>
        public global::VRCZ.VRChatApi.Generated.Groups.Item.Requests.RequestsRequestBuilder Requests
        {
            get => new global::VRCZ.VRChatApi.Generated.Groups.Item.Requests.RequestsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The roles property</summary>
        public global::VRCZ.VRChatApi.Generated.Groups.Item.Roles.RolesRequestBuilder Roles
        {
            get => new global::VRCZ.VRChatApi.Generated.Groups.Item.Roles.RolesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Groups.Item.WithGroupItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithGroupItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/groups/{groupId}{?includeRoles*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Groups.Item.WithGroupItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithGroupItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/groups/{groupId}{?includeRoles*}", rawUrl)
        {
        }
        /// <summary>
        /// Deletes a Group.
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.Success"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::VRCZ.VRChatApi.Generated.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::VRCZ.VRChatApi.Generated.Models.Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::VRCZ.VRChatApi.Generated.Models.Success?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::VRCZ.VRChatApi.Generated.Models.Success> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::VRCZ.VRChatApi.Generated.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::VRCZ.VRChatApi.Generated.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::VRCZ.VRChatApi.Generated.Models.Success>(requestInfo, global::VRCZ.VRChatApi.Generated.Models.Success.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a single Group by ID.
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.Group"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::VRCZ.VRChatApi.Generated.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::VRCZ.VRChatApi.Generated.Models.Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::VRCZ.VRChatApi.Generated.Models.Group?> GetAsync(Action<RequestConfiguration<global::VRCZ.VRChatApi.Generated.Groups.Item.WithGroupItemRequestBuilder.WithGroupItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::VRCZ.VRChatApi.Generated.Models.Group> GetAsync(Action<RequestConfiguration<global::VRCZ.VRChatApi.Generated.Groups.Item.WithGroupItemRequestBuilder.WithGroupItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::VRCZ.VRChatApi.Generated.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::VRCZ.VRChatApi.Generated.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::VRCZ.VRChatApi.Generated.Models.Group>(requestInfo, global::VRCZ.VRChatApi.Generated.Models.Group.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates a Group and returns it.
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.Group"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::VRCZ.VRChatApi.Generated.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::VRCZ.VRChatApi.Generated.Models.Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::VRCZ.VRChatApi.Generated.Models.Group?> PutAsync(global::VRCZ.VRChatApi.Generated.Models.UpdateGroupRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::VRCZ.VRChatApi.Generated.Models.Group> PutAsync(global::VRCZ.VRChatApi.Generated.Models.UpdateGroupRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::VRCZ.VRChatApi.Generated.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::VRCZ.VRChatApi.Generated.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::VRCZ.VRChatApi.Generated.Models.Group>(requestInfo, global::VRCZ.VRChatApi.Generated.Models.Group.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes a Group.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a single Group by ID.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::VRCZ.VRChatApi.Generated.Groups.Item.WithGroupItemRequestBuilder.WithGroupItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::VRCZ.VRChatApi.Generated.Groups.Item.WithGroupItemRequestBuilder.WithGroupItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates a Group and returns it.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::VRCZ.VRChatApi.Generated.Models.UpdateGroupRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::VRCZ.VRChatApi.Generated.Models.UpdateGroupRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Groups.Item.WithGroupItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::VRCZ.VRChatApi.Generated.Groups.Item.WithGroupItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::VRCZ.VRChatApi.Generated.Groups.Item.WithGroupItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithGroupItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Returns a single Group by ID.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithGroupItemRequestBuilderGetQueryParameters 
        {
            /// <summary>Include roles for the Group object. Defaults to false.</summary>
            [QueryParameter("includeRoles")]
            public bool? IncludeRoles { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithGroupItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::VRCZ.VRChatApi.Generated.Groups.Item.WithGroupItemRequestBuilder.WithGroupItemRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithGroupItemRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
