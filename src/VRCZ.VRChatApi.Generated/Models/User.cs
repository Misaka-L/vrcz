// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace VRCZ.VRChatApi.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class User : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>obsolete, use `ageVerified` instead.`ageVerificationStatus == &quot;18+&quot;` =&gt; `ageVerified == true``ageVerificationStatus != &quot;18+&quot;` =&gt; `ageVerified == false`</summary>
        public global::VRCZ.VRChatApi.Generated.Models.AgeVerificationStatus? AgeVerificationStatus { get; set; }
        /// <summary>`true` if, user is age verified 18 or above. but `false`, when status is not shared. Otherwise always `false`.</summary>
        public bool? AgeVerified { get; set; }
        /// <summary>The allowAvatarCopying property</summary>
        public bool? AllowAvatarCopying { get; set; }
        /// <summary> </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::VRCZ.VRChatApi.Generated.Models.Badge>? Badges { get; set; }
#nullable restore
#else
        public List<global::VRCZ.VRChatApi.Generated.Models.Badge> Badges { get; set; }
#endif
        /// <summary>The bio property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bio { get; set; }
#nullable restore
#else
        public string Bio { get; set; }
#endif
        /// <summary>The bioLinks property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? BioLinks { get; set; }
#nullable restore
#else
        public List<string> BioLinks { get; set; }
#endif
        /// <summary>When profilePicOverride is not empty, use it instead.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrentAvatarImageUrl { get; set; }
#nullable restore
#else
        public string CurrentAvatarImageUrl { get; set; }
#endif
        /// <summary>The currentAvatarTags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CurrentAvatarTags { get; set; }
#nullable restore
#else
        public List<string> CurrentAvatarTags { get; set; }
#endif
        /// <summary>When profilePicOverride is not empty, use it instead.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrentAvatarThumbnailImageUrl { get; set; }
#nullable restore
#else
        public string CurrentAvatarThumbnailImageUrl { get; set; }
#endif
        /// <summary>The date_joined property</summary>
        public Date? DateJoined { get; set; }
        /// <summary>&quot;none&quot; User is a normal user&quot;trusted&quot; Unknown&quot;internal&quot; Is a VRChat Developer&quot;moderator&quot; Is a VRChat ModeratorStaff can hide their developerType at will.</summary>
        public global::VRCZ.VRChatApi.Generated.Models.DeveloperType? DeveloperType { get; set; }
        /// <summary>A users visual display name. This is what shows up in-game, and can different from their `username`. Changing display name is restricted to a cooldown period.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The friendKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FriendKey { get; set; }
#nullable restore
#else
        public string FriendKey { get; set; }
#endif
        /// <summary>The friendRequestStatus property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FriendRequestStatus { get; set; }
#nullable restore
#else
        public string FriendRequestStatus { get; set; }
#endif
        /// <summary>A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>InstanceID can be &quot;offline&quot; on User profiles if you are not friends with that user and &quot;private&quot; if you are friends and user is in private instance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InstanceId { get; set; }
#nullable restore
#else
        public string InstanceId { get; set; }
#endif
        /// <summary>Either their `friendKey`, or empty string if you are not friends. Unknown usage.</summary>
        public bool? IsFriend { get; set; }
        /// <summary>Either a date-time or empty string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastActivity { get; set; }
#nullable restore
#else
        public string LastActivity { get; set; }
#endif
        /// <summary>Either a date-time or empty string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastLogin { get; set; }
#nullable restore
#else
        public string LastLogin { get; set; }
#endif
        /// <summary>The last_mobile property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastMobile { get; set; }
#nullable restore
#else
        public string LastMobile { get; set; }
#endif
        /// <summary>This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastPlatform { get; set; }
#nullable restore
#else
        public string LastPlatform { get; set; }
#endif
        /// <summary>WorldID be &quot;offline&quot; on User profiles if you are not friends with that user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Location { get; set; }
#nullable restore
#else
        public string Location { get; set; }
#endif
        /// <summary>The note property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>The platform property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Platform { get; set; }
#nullable restore
#else
        public string Platform { get; set; }
#endif
        /// <summary>The profilePicOverride property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfilePicOverride { get; set; }
#nullable restore
#else
        public string ProfilePicOverride { get; set; }
#endif
        /// <summary>The profilePicOverrideThumbnail property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfilePicOverrideThumbnail { get; set; }
#nullable restore
#else
        public string ProfilePicOverrideThumbnail { get; set; }
#endif
        /// <summary>The pronouns property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Pronouns { get; set; }
#nullable restore
#else
        public string Pronouns { get; set; }
#endif
        /// <summary>* &quot;online&quot; User is online in VRChat* &quot;active&quot; User is online, but not in VRChat* &quot;offline&quot; User is offlineAlways offline when returned through `getCurrentUser` (/auth/user).</summary>
        public global::VRCZ.VRChatApi.Generated.Models.UserState? State { get; set; }
        /// <summary>Defines the User&apos;s current status, for example &quot;ask me&quot;, &quot;join me&quot; or &quot;offline. This status is a combined indicator of their online activity and privacy preference.</summary>
        public global::VRCZ.VRChatApi.Generated.Models.UserStatus? Status { get; set; }
        /// <summary>The statusDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatusDescription { get; set; }
#nullable restore
#else
        public string StatusDescription { get; set; }
#endif
        /// <summary> </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The travelingToInstance property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TravelingToInstance { get; set; }
#nullable restore
#else
        public string TravelingToInstance { get; set; }
#endif
        /// <summary>The travelingToLocation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TravelingToLocation { get; set; }
#nullable restore
#else
        public string TravelingToLocation { get; set; }
#endif
        /// <summary>The travelingToWorld property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TravelingToWorld { get; set; }
#nullable restore
#else
        public string TravelingToWorld { get; set; }
#endif
        /// <summary>The userIcon property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserIcon { get; set; }
#nullable restore
#else
        public string UserIcon { get; set; }
#endif
        /// <summary>-| A users unique name, used during login. This is different from `displayName` which is what shows up in-game. A users `username` can never be changed.&apos;**DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>WorldID be &quot;offline&quot; on User profiles if you are not friends with that user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WorldId { get; set; }
#nullable restore
#else
        public string WorldId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Models.User"/> and sets the default values.
        /// </summary>
        public User()
        {
            AdditionalData = new Dictionary<string, object>();
            DeveloperType = global::VRCZ.VRChatApi.Generated.Models.DeveloperType.None;
            State = global::VRCZ.VRChatApi.Generated.Models.UserState.Offline;
            Status = global::VRCZ.VRChatApi.Generated.Models.UserStatus.Offline;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.User"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::VRCZ.VRChatApi.Generated.Models.User CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::VRCZ.VRChatApi.Generated.Models.User();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ageVerificationStatus", n => { AgeVerificationStatus = n.GetEnumValue<global::VRCZ.VRChatApi.Generated.Models.AgeVerificationStatus>(); } },
                { "ageVerified", n => { AgeVerified = n.GetBoolValue(); } },
                { "allowAvatarCopying", n => { AllowAvatarCopying = n.GetBoolValue(); } },
                { "badges", n => { Badges = n.GetCollectionOfObjectValues<global::VRCZ.VRChatApi.Generated.Models.Badge>(global::VRCZ.VRChatApi.Generated.Models.Badge.CreateFromDiscriminatorValue)?.AsList(); } },
                { "bio", n => { Bio = n.GetStringValue(); } },
                { "bioLinks", n => { BioLinks = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "currentAvatarImageUrl", n => { CurrentAvatarImageUrl = n.GetStringValue(); } },
                { "currentAvatarTags", n => { CurrentAvatarTags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "currentAvatarThumbnailImageUrl", n => { CurrentAvatarThumbnailImageUrl = n.GetStringValue(); } },
                { "date_joined", n => { DateJoined = n.GetDateValue(); } },
                { "developerType", n => { DeveloperType = n.GetEnumValue<global::VRCZ.VRChatApi.Generated.Models.DeveloperType>(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "friendKey", n => { FriendKey = n.GetStringValue(); } },
                { "friendRequestStatus", n => { FriendRequestStatus = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "instanceId", n => { InstanceId = n.GetStringValue(); } },
                { "isFriend", n => { IsFriend = n.GetBoolValue(); } },
                { "last_activity", n => { LastActivity = n.GetStringValue(); } },
                { "last_login", n => { LastLogin = n.GetStringValue(); } },
                { "last_mobile", n => { LastMobile = n.GetStringValue(); } },
                { "last_platform", n => { LastPlatform = n.GetStringValue(); } },
                { "location", n => { Location = n.GetStringValue(); } },
                { "note", n => { Note = n.GetStringValue(); } },
                { "platform", n => { Platform = n.GetStringValue(); } },
                { "profilePicOverride", n => { ProfilePicOverride = n.GetStringValue(); } },
                { "profilePicOverrideThumbnail", n => { ProfilePicOverrideThumbnail = n.GetStringValue(); } },
                { "pronouns", n => { Pronouns = n.GetStringValue(); } },
                { "state", n => { State = n.GetEnumValue<global::VRCZ.VRChatApi.Generated.Models.UserState>(); } },
                { "status", n => { Status = n.GetEnumValue<global::VRCZ.VRChatApi.Generated.Models.UserStatus>(); } },
                { "statusDescription", n => { StatusDescription = n.GetStringValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "travelingToInstance", n => { TravelingToInstance = n.GetStringValue(); } },
                { "travelingToLocation", n => { TravelingToLocation = n.GetStringValue(); } },
                { "travelingToWorld", n => { TravelingToWorld = n.GetStringValue(); } },
                { "userIcon", n => { UserIcon = n.GetStringValue(); } },
                { "username", n => { Username = n.GetStringValue(); } },
                { "worldId", n => { WorldId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::VRCZ.VRChatApi.Generated.Models.AgeVerificationStatus>("ageVerificationStatus", AgeVerificationStatus);
            writer.WriteBoolValue("ageVerified", AgeVerified);
            writer.WriteBoolValue("allowAvatarCopying", AllowAvatarCopying);
            writer.WriteCollectionOfObjectValues<global::VRCZ.VRChatApi.Generated.Models.Badge>("badges", Badges);
            writer.WriteStringValue("bio", Bio);
            writer.WriteCollectionOfPrimitiveValues<string>("bioLinks", BioLinks);
            writer.WriteStringValue("currentAvatarImageUrl", CurrentAvatarImageUrl);
            writer.WriteCollectionOfPrimitiveValues<string>("currentAvatarTags", CurrentAvatarTags);
            writer.WriteStringValue("currentAvatarThumbnailImageUrl", CurrentAvatarThumbnailImageUrl);
            writer.WriteDateValue("date_joined", DateJoined);
            writer.WriteEnumValue<global::VRCZ.VRChatApi.Generated.Models.DeveloperType>("developerType", DeveloperType);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("friendKey", FriendKey);
            writer.WriteStringValue("friendRequestStatus", FriendRequestStatus);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("instanceId", InstanceId);
            writer.WriteBoolValue("isFriend", IsFriend);
            writer.WriteStringValue("last_activity", LastActivity);
            writer.WriteStringValue("last_login", LastLogin);
            writer.WriteStringValue("last_mobile", LastMobile);
            writer.WriteStringValue("last_platform", LastPlatform);
            writer.WriteStringValue("location", Location);
            writer.WriteStringValue("note", Note);
            writer.WriteStringValue("platform", Platform);
            writer.WriteStringValue("profilePicOverride", ProfilePicOverride);
            writer.WriteStringValue("profilePicOverrideThumbnail", ProfilePicOverrideThumbnail);
            writer.WriteStringValue("pronouns", Pronouns);
            writer.WriteEnumValue<global::VRCZ.VRChatApi.Generated.Models.UserState>("state", State);
            writer.WriteEnumValue<global::VRCZ.VRChatApi.Generated.Models.UserStatus>("status", Status);
            writer.WriteStringValue("statusDescription", StatusDescription);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteStringValue("travelingToInstance", TravelingToInstance);
            writer.WriteStringValue("travelingToLocation", TravelingToLocation);
            writer.WriteStringValue("travelingToWorld", TravelingToWorld);
            writer.WriteStringValue("userIcon", UserIcon);
            writer.WriteStringValue("username", Username);
            writer.WriteStringValue("worldId", WorldId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
