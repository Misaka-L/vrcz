// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace VRCZ.VRChatApi.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class LimitedUser : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bio property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bio { get; set; }
#nullable restore
#else
        public string Bio { get; set; }
#endif
        /// <summary> </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? BioLinks { get; set; }
#nullable restore
#else
        public List<string> BioLinks { get; set; }
#endif
        /// <summary>When profilePicOverride is not empty, use it instead.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrentAvatarImageUrl { get; set; }
#nullable restore
#else
        public string CurrentAvatarImageUrl { get; set; }
#endif
        /// <summary>The currentAvatarTags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CurrentAvatarTags { get; set; }
#nullable restore
#else
        public List<string> CurrentAvatarTags { get; set; }
#endif
        /// <summary>When profilePicOverride is not empty, use it instead.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrentAvatarThumbnailImageUrl { get; set; }
#nullable restore
#else
        public string CurrentAvatarThumbnailImageUrl { get; set; }
#endif
        /// <summary>&quot;none&quot; User is a normal user&quot;trusted&quot; Unknown&quot;internal&quot; Is a VRChat Developer&quot;moderator&quot; Is a VRChat ModeratorStaff can hide their developerType at will.</summary>
        public global::VRCZ.VRChatApi.Generated.Models.DeveloperType? DeveloperType { get; set; }
        /// <summary>The displayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The fallbackAvatar property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FallbackAvatar { get; set; }
#nullable restore
#else
        public string FallbackAvatar { get; set; }
#endif
        /// <summary>The friendKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FriendKey { get; set; }
#nullable restore
#else
        public string FriendKey { get; set; }
#endif
        /// <summary>A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The isFriend property</summary>
        public bool? IsFriend { get; set; }
        /// <summary>The last_login property</summary>
        public DateTimeOffset? LastLogin { get; set; }
        /// <summary>This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastPlatform { get; set; }
#nullable restore
#else
        public string LastPlatform { get; set; }
#endif
        /// <summary>The location property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Location { get; set; }
#nullable restore
#else
        public string Location { get; set; }
#endif
        /// <summary>The profilePicOverride property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfilePicOverride { get; set; }
#nullable restore
#else
        public string ProfilePicOverride { get; set; }
#endif
        /// <summary>The pronouns property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Pronouns { get; set; }
#nullable restore
#else
        public string Pronouns { get; set; }
#endif
        /// <summary>Defines the User&apos;s current status, for example &quot;ask me&quot;, &quot;join me&quot; or &quot;offline. This status is a combined indicator of their online activity and privacy preference.</summary>
        public global::VRCZ.VRChatApi.Generated.Models.UserStatus? Status { get; set; }
        /// <summary>The statusDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatusDescription { get; set; }
#nullable restore
#else
        public string StatusDescription { get; set; }
#endif
        /// <summary>&lt;- Always empty.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The userIcon property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserIcon { get; set; }
#nullable restore
#else
        public string UserIcon { get; set; }
#endif
        /// <summary>-| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Models.LimitedUser"/> and sets the default values.
        /// </summary>
        public LimitedUser()
        {
            AdditionalData = new Dictionary<string, object>();
            DeveloperType = global::VRCZ.VRChatApi.Generated.Models.DeveloperType.None;
            Status = global::VRCZ.VRChatApi.Generated.Models.UserStatus.Offline;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.LimitedUser"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::VRCZ.VRChatApi.Generated.Models.LimitedUser CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::VRCZ.VRChatApi.Generated.Models.LimitedUser();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bio", n => { Bio = n.GetStringValue(); } },
                { "bioLinks", n => { BioLinks = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "currentAvatarImageUrl", n => { CurrentAvatarImageUrl = n.GetStringValue(); } },
                { "currentAvatarTags", n => { CurrentAvatarTags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "currentAvatarThumbnailImageUrl", n => { CurrentAvatarThumbnailImageUrl = n.GetStringValue(); } },
                { "developerType", n => { DeveloperType = n.GetEnumValue<global::VRCZ.VRChatApi.Generated.Models.DeveloperType>(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "fallbackAvatar", n => { FallbackAvatar = n.GetStringValue(); } },
                { "friendKey", n => { FriendKey = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "isFriend", n => { IsFriend = n.GetBoolValue(); } },
                { "last_login", n => { LastLogin = n.GetDateTimeOffsetValue(); } },
                { "last_platform", n => { LastPlatform = n.GetStringValue(); } },
                { "location", n => { Location = n.GetStringValue(); } },
                { "profilePicOverride", n => { ProfilePicOverride = n.GetStringValue(); } },
                { "pronouns", n => { Pronouns = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::VRCZ.VRChatApi.Generated.Models.UserStatus>(); } },
                { "statusDescription", n => { StatusDescription = n.GetStringValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "userIcon", n => { UserIcon = n.GetStringValue(); } },
                { "username", n => { Username = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("bio", Bio);
            writer.WriteCollectionOfPrimitiveValues<string>("bioLinks", BioLinks);
            writer.WriteStringValue("currentAvatarImageUrl", CurrentAvatarImageUrl);
            writer.WriteCollectionOfPrimitiveValues<string>("currentAvatarTags", CurrentAvatarTags);
            writer.WriteStringValue("currentAvatarThumbnailImageUrl", CurrentAvatarThumbnailImageUrl);
            writer.WriteEnumValue<global::VRCZ.VRChatApi.Generated.Models.DeveloperType>("developerType", DeveloperType);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("fallbackAvatar", FallbackAvatar);
            writer.WriteStringValue("friendKey", FriendKey);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isFriend", IsFriend);
            writer.WriteDateTimeOffsetValue("last_login", LastLogin);
            writer.WriteStringValue("last_platform", LastPlatform);
            writer.WriteStringValue("location", Location);
            writer.WriteStringValue("profilePicOverride", ProfilePicOverride);
            writer.WriteStringValue("pronouns", Pronouns);
            writer.WriteEnumValue<global::VRCZ.VRChatApi.Generated.Models.UserStatus>("status", Status);
            writer.WriteStringValue("statusDescription", StatusDescription);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteStringValue("userIcon", UserIcon);
            writer.WriteStringValue("username", Username);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
