// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace VRCZ.VRChatApi.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class APIConfig : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accessLogsUrls property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.APIConfig_accessLogsUrls? AccessLogsUrls { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.APIConfig_accessLogsUrls AccessLogsUrls { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>VRChat&apos;s office address</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address { get; set; }
#nullable restore
#else
        public string Address { get; set; }
#endif
        /// <summary>The ageVerificationInviteVisible property</summary>
        public bool? AgeVerificationInviteVisible { get; set; }
        /// <summary>The ageVerificationP property</summary>
        public bool? AgeVerificationP { get; set; }
        /// <summary>The ageVerificationStatusVisible property</summary>
        public bool? AgeVerificationStatusVisible { get; set; }
        /// <summary>Max retries for avatar analysis requests</summary>
        public int? AnalysisMaxRetries { get; set; }
        /// <summary>Interval between retries for avatar analysis requests</summary>
        public int? AnalysisRetryInterval { get; set; }
        /// <summary>Unknown</summary>
        public int? AnalyticsSegmentNewUIPctOfUsers { get; set; }
        /// <summary>Unknown</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AnalyticsSegmentNewUISalt { get; set; }
#nullable restore
#else
        public string AnalyticsSegmentNewUISalt { get; set; }
#endif
        /// <summary>Public Announcements</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::VRCZ.VRChatApi.Generated.Models.APIConfigAnnouncement>? Announcements { get; set; }
#nullable restore
#else
        public List<global::VRCZ.VRChatApi.Generated.Models.APIConfigAnnouncement> Announcements { get; set; }
#endif
        /// <summary>Game name</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppName { get; set; }
#nullable restore
#else
        public string AppName { get; set; }
#endif
        /// <summary>List of supported Languages</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AvailableLanguageCodes { get; set; }
#nullable restore
#else
        public List<string> AvailableLanguageCodes { get; set; }
#endif
        /// <summary>List of supported Languages</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AvailableLanguages { get; set; }
#nullable restore
#else
        public List<string> AvailableLanguages { get; set; }
#endif
        /// <summary>The avatarPerfLimiter property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.APIConfig_avatarPerfLimiter? AvatarPerfLimiter { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.APIConfig_avatarPerfLimiter AvatarPerfLimiter { get; set; }
#endif
        /// <summary>Build tag of the API server</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BuildVersionTag { get; set; }
#nullable restore
#else
        public string BuildVersionTag { get; set; }
#endif
        /// <summary>Unknown</summary>
        public int? ChatboxLogBufferSeconds { get; set; }
        /// <summary>apiKey to be used for all other requests</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientApiKey { get; set; }
#nullable restore
#else
        public string ClientApiKey { get; set; }
#endif
        /// <summary>Unknown</summary>
        public int? ClientBPSCeiling { get; set; }
        /// <summary>Unknown</summary>
        public int? ClientDisconnectTimeout { get; set; }
        /// <summary>Unknown</summary>
        public bool? ClientNetDispatchThread { get; set; }
        /// <summary>Unknown</summary>
        public bool? ClientNetDispatchThreadMobile { get; set; }
        /// <summary>Unknown</summary>
        public bool? ClientNetInThread { get; set; }
        /// <summary>Unknown</summary>
        public bool? ClientNetInThread2 { get; set; }
        /// <summary>Unknown</summary>
        public bool? ClientNetInThreadMobile { get; set; }
        /// <summary>Unknown</summary>
        public bool? ClientNetInThreadMobile2 { get; set; }
        /// <summary>Unknown</summary>
        public bool? ClientNetOutThread { get; set; }
        /// <summary>Unknown</summary>
        public bool? ClientNetOutThread2 { get; set; }
        /// <summary>Unknown</summary>
        public bool? ClientNetOutThreadMobile { get; set; }
        /// <summary>Unknown</summary>
        public bool? ClientNetOutThreadMobile2 { get; set; }
        /// <summary>Unknown</summary>
        public int? ClientQR { get; set; }
        /// <summary>Unknown</summary>
        public int? ClientReservedPlayerBPS { get; set; }
        /// <summary>Unknown</summary>
        public int? ClientSentCountAllowance { get; set; }
        /// <summary>Constants</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.APIConfigConstants? Constants { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.APIConfigConstants Constants { get; set; }
#endif
        /// <summary>VRChat&apos;s contact email</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactEmail { get; set; }
#nullable restore
#else
        public string ContactEmail { get; set; }
#endif
        /// <summary>VRChat&apos;s copyright-issues-related email</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CopyrightEmail { get; set; }
#nullable restore
#else
        public string CopyrightEmail { get; set; }
#endif
        /// <summary>Current version number of the Privacy Agreement</summary>
        public int? CurrentPrivacyVersion { get; set; }
        /// <summary>Current version number of the Terms of Service</summary>
        public int? CurrentTOSVersion { get; set; }
        /// <summary>The defaultAvatar property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultAvatar { get; set; }
#nullable restore
#else
        public string DefaultAvatar { get; set; }
#endif
        /// <summary>The defaultStickerSet property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultStickerSet { get; set; }
#nullable restore
#else
        public string DefaultStickerSet { get; set; }
#endif
        /// <summary>Used to identify which API deployment cluster is currently responding.`blue` and `green` are used by Production.`grape`and `cherry` are used during Development.[Blue Green Deployment by Martin Fowler](https://martinfowler.com/bliki/BlueGreenDeployment.html)</summary>
        public global::VRCZ.VRChatApi.Generated.Models.DeploymentGroup? DeploymentGroup { get; set; }
        /// <summary>Unknown</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DevLanguageCodes { get; set; }
#nullable restore
#else
        public List<string> DevLanguageCodes { get; set; }
#endif
        /// <summary>Link to download the development SDK, use downloadUrls instead</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DevSdkUrl { get; set; }
#nullable restore
#else
        public string DevSdkUrl { get; set; }
#endif
        /// <summary>Version of the development SDK</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DevSdkVersion { get; set; }
#nullable restore
#else
        public string DevSdkVersion { get; set; }
#endif
        /// <summary>Toggles if copying avatars should be disabled</summary>
        public bool? DisableAvatarCopying { get; set; }
        /// <summary>Toggles if avatar gating should be disabled. Avatar gating restricts uploading of avatars to people with the `system_avatar_access` Tag or `admin_avatar_access` Tag</summary>
        public bool? DisableAvatarGating { get; set; }
        /// <summary>Unknown</summary>
        public bool? DisableAVProInProton { get; set; }
        /// <summary>Unknown</summary>
        public bool? DisableCaptcha { get; set; }
        /// <summary>Toggles if the Community Labs should be disabled</summary>
        public bool? DisableCommunityLabs { get; set; }
        /// <summary>Toggles if promotion out of Community Labs should be disabled</summary>
        public bool? DisableCommunityLabsPromotion { get; set; }
        /// <summary>Unknown</summary>
        public bool? DisableEmail { get; set; }
        /// <summary>Toggles if Analytics should be disabled.</summary>
        public bool? DisableEventStream { get; set; }
        /// <summary>Toggles if feedback gating should be disabled. Feedback gating restricts submission of feedback (reporting a World or User) to people with the `system_feedback_access` Tag.</summary>
        public bool? DisableFeedbackGating { get; set; }
        /// <summary>Unknown, probably toggles compilation of frontend web builds? So internal flag?</summary>
        public bool? DisableFrontendBuilds { get; set; }
        /// <summary>Toggles if gift drops should be disabled</summary>
        public bool? DisableGiftDrops { get; set; }
        /// <summary>Unknown</summary>
        public bool? DisableHello { get; set; }
        /// <summary>Toggles if signing up for Subscriptions in Oculus is disabled or not.</summary>
        public bool? DisableOculusSubs { get; set; }
        /// <summary>Toggles if new user account registration should be disabled.</summary>
        public bool? DisableRegistration { get; set; }
        /// <summary>Toggles if Steam Networking should be disabled. VRChat these days uses Photon Unity Networking (PUN) instead.</summary>
        public bool? DisableSteamNetworking { get; set; }
        /// <summary>Toggles if 2FA should be disabled.</summary>
        [Obsolete("")]
        public bool? DisableTwoFactorAuth { get; set; }
        /// <summary>Toggles if Udon should be universally disabled in-game.</summary>
        public bool? DisableUdon { get; set; }
        /// <summary>Toggles if account upgrading &quot;linking with Steam/Oculus&quot; should be disabled.</summary>
        public bool? DisableUpgradeAccount { get; set; }
        /// <summary>Unknown, &quot;dis&quot; maybe for disconnect?</summary>
        public DateTimeOffset? DisCountdown { get; set; }
        /// <summary>Download link for game on the Oculus Rift website.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DownloadLinkWindows { get; set; }
#nullable restore
#else
        public string DownloadLinkWindows { get; set; }
#endif
        /// <summary>Download links for various development assets.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.APIConfigDownloadURLList? DownloadUrls { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.APIConfigDownloadURLList DownloadUrls { get; set; }
#endif
        /// <summary>Array of DynamicWorldRow objects, used by the game to display the list of world rows</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::VRCZ.VRChatApi.Generated.Models.DynamicContentRow>? DynamicWorldRows { get; set; }
#nullable restore
#else
        public List<global::VRCZ.VRChatApi.Generated.Models.DynamicContentRow> DynamicWorldRows { get; set; }
#endif
        /// <summary>Unknown</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EconomyPauseEnd { get; set; }
#nullable restore
#else
        public string EconomyPauseEnd { get; set; }
#endif
        /// <summary>Unknown</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EconomyPauseStart { get; set; }
#nullable restore
#else
        public string EconomyPauseStart { get; set; }
#endif
        /// <summary>Unknown</summary>
        public int? EconomyState { get; set; }
        /// <summary>The events property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.APIConfigEvents? Events { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.APIConfigEvents Events { get; set; }
#endif
        /// <summary>Unknown</summary>
        public bool? ForceUseLatestWorld { get; set; }
        /// <summary>Display type of gifts</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GiftDisplayType { get; set; }
#nullable restore
#else
        public string GiftDisplayType { get; set; }
#endif
        /// <summary>Unknown</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GoogleApiClientId { get; set; }
#nullable restore
#else
        public string GoogleApiClientId { get; set; }
#endif
        /// <summary>Redirect target if you try to open the base API domain in your browser</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HomepageRedirectTarget { get; set; }
#nullable restore
#else
        public string HomepageRedirectTarget { get; set; }
#endif
        /// <summary>WorldID be &quot;offline&quot; on User profiles if you are not friends with that user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HomeWorldId { get; set; }
#nullable restore
#else
        public string HomeWorldId { get; set; }
#endif
        /// <summary>WorldID be &quot;offline&quot; on User profiles if you are not friends with that user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HubWorldId { get; set; }
#nullable restore
#else
        public string HubWorldId { get; set; }
#endif
        /// <summary>A list of explicitly allowed origins that worlds can request images from via the Udon&apos;s [VRCImageDownloader#DownloadImage](https://creators.vrchat.com/worlds/udon/image-loading/#downloadimage).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ImageHostUrlList { get; set; }
#nullable restore
#else
        public List<string> ImageHostUrlList { get; set; }
#endif
        /// <summary>VRChat&apos;s job application email</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobsEmail { get; set; }
#nullable restore
#else
        public string JobsEmail { get; set; }
#endif
        /// <summary>Minimum Unity version required for uploading assets</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MinimumUnityVersionForUploads { get; set; }
#nullable restore
#else
        public string MinimumUnityVersionForUploads { get; set; }
#endif
        /// <summary>Minimum supported client build number for various platforms</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.APIConfig_minSupportedClientBuildNumber? MinSupportedClientBuildNumber { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.APIConfig_minSupportedClientBuildNumber MinSupportedClientBuildNumber { get; set; }
#endif
        /// <summary>VRChat&apos;s moderation related email</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModerationEmail { get; set; }
#nullable restore
#else
        public string ModerationEmail { get; set; }
#endif
        /// <summary>Used in-game to notify a user they aren&apos;t allowed to select avatars in private worlds</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NotAllowedToSelectAvatarInPrivateWorldMessage { get; set; }
#nullable restore
#else
        public string NotAllowedToSelectAvatarInPrivateWorldMessage { get; set; }
#endif
        /// <summary>Whether to allow offline analysis</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.APIConfig_offlineAnalysis? OfflineAnalysis { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.APIConfig_offlineAnalysis OfflineAnalysis { get; set; }
#endif
        /// <summary>Unknown</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PhotonNameserverOverrides { get; set; }
#nullable restore
#else
        public List<string> PhotonNameserverOverrides { get; set; }
#endif
        /// <summary>Unknown</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PhotonPublicKeys { get; set; }
#nullable restore
#else
        public List<string> PhotonPublicKeys { get; set; }
#endif
        /// <summary>Currently used youtube-dl.exe hash in SHA1-delimited format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlayerUrlResolverSha1 { get; set; }
#nullable restore
#else
        public string PlayerUrlResolverSha1 { get; set; }
#endif
        /// <summary>Currently used youtube-dl.exe version</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlayerUrlResolverVersion { get; set; }
#nullable restore
#else
        public string PlayerUrlResolverVersion { get; set; }
#endif
        /// <summary>Categories available for reporting objectionable content</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportCategories? ReportCategories { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportCategories ReportCategories { get; set; }
#endif
        /// <summary>URL to the report form</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReportFormUrl { get; set; }
#nullable restore
#else
        public string ReportFormUrl { get; set; }
#endif
        /// <summary>Options for reporting content</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportOptions? ReportOptions { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportOptions ReportOptions { get; set; }
#endif
        /// <summary>Reasons available for reporting users</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportReasons? ReportReasons { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportReasons ReportReasons { get; set; }
#endif
        /// <summary>The requireAgeVerificationBetaTag property</summary>
        public bool? RequireAgeVerificationBetaTag { get; set; }
        /// <summary>Link to the developer FAQ</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SdkDeveloperFaqUrl { get; set; }
#nullable restore
#else
        public string SdkDeveloperFaqUrl { get; set; }
#endif
        /// <summary>Link to the official VRChat Discord</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SdkDiscordUrl { get; set; }
#nullable restore
#else
        public string SdkDiscordUrl { get; set; }
#endif
        /// <summary>Used in the SDK to notify a user they aren&apos;t allowed to upload avatars/worlds yet</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SdkNotAllowedToPublishMessage { get; set; }
#nullable restore
#else
        public string SdkNotAllowedToPublishMessage { get; set; }
#endif
        /// <summary>Unity version supported by the SDK</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SdkUnityVersion { get; set; }
#nullable restore
#else
        public string SdkUnityVersion { get; set; }
#endif
        /// <summary>Server name of the API server currently responding</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServerName { get; set; }
#nullable restore
#else
        public string ServerName { get; set; }
#endif
        /// <summary>A list of explicitly allowed origins that worlds can request strings from via the Udon&apos;s [VRCStringDownloader.LoadUrl](https://creators.vrchat.com/worlds/udon/string-loading/#ivrcstringdownload).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? StringHostUrlList { get; set; }
#nullable restore
#else
        public List<string> StringHostUrlList { get; set; }
#endif
        /// <summary>VRChat&apos;s support email</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SupportEmail { get; set; }
#nullable restore
#else
        public string SupportEmail { get; set; }
#endif
        /// <summary>VRChat&apos;s support form</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SupportFormUrl { get; set; }
#nullable restore
#else
        public string SupportFormUrl { get; set; }
#endif
        /// <summary>Unknown</summary>
        public bool? Timekeeping { get; set; }
        /// <summary>WorldID be &quot;offline&quot; on User profiles if you are not friends with that user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeOutWorldId { get; set; }
#nullable restore
#else
        public string TimeOutWorldId { get; set; }
#endif
        /// <summary>WorldID be &quot;offline&quot; on User profiles if you are not friends with that user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TutorialWorldId { get; set; }
#nullable restore
#else
        public string TutorialWorldId { get; set; }
#endif
        /// <summary>Unknown</summary>
        public int? UpdateRateMsMaximum { get; set; }
        /// <summary>Unknown</summary>
        public int? UpdateRateMsMinimum { get; set; }
        /// <summary>Unknown</summary>
        public int? UpdateRateMsNormal { get; set; }
        /// <summary>Unknown</summary>
        public int? UpdateRateMsUdonManual { get; set; }
        /// <summary>Unknown</summary>
        public int? UploadAnalysisPercent { get; set; }
        /// <summary>List of allowed URLs that bypass the &quot;Allow untrusted URL&apos;s&quot; setting in-game</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UrlList { get; set; }
#nullable restore
#else
        public List<string> UrlList { get; set; }
#endif
        /// <summary>Unknown</summary>
        public bool? UseReliableUdpForVoice { get; set; }
        /// <summary>Download link for game on the Steam website.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ViveWindowsUrl { get; set; }
#nullable restore
#else
        public string ViveWindowsUrl { get; set; }
#endif
        /// <summary>Unknown, probably voice optimization testing</summary>
        public bool? VoiceEnableDegradation { get; set; }
        /// <summary>Unknown, probably voice optimization testing</summary>
        public bool? VoiceEnableReceiverLimiting { get; set; }
        /// <summary>Unknown</summary>
        public int? WebsocketMaxFriendsRefreshDelay { get; set; }
        /// <summary>Unknown</summary>
        public int? WebsocketQuickReconnectTime { get; set; }
        /// <summary>Unknown</summary>
        public int? WebsocketReconnectMaxDelay { get; set; }
        /// <summary>List of allowed URLs that are allowed to host avatar assets</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? WhiteListedAssetUrls { get; set; }
#nullable restore
#else
        public List<string> WhiteListedAssetUrls { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Models.APIConfig"/> and sets the default values.
        /// </summary>
        public APIConfig()
        {
            AdditionalData = new Dictionary<string, object>();
            AppName = "VrChat";
            DeploymentGroup = global::VRCZ.VRChatApi.Generated.Models.DeploymentGroup.Blue;
            GoogleApiClientId = "827942544393-r2ouvckvouldn9dg9uruseje575e878f.apps.googleusercontent.com";
            HomepageRedirectTarget = "https://hello.vrchat.com";
            MinimumUnityVersionForUploads = "2019.0.0f1";
            ReportFormUrl = "https://help.vrchat.com/hc/en-us/requests/new?ticket_form_id=1500000182242&tf_360056455174=user_report&tf_360057451993={userId}&tf_1500001445142={reportedId}&tf_subject={reason} {category} By {contentType} {reportedName}&tf_description={description}";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.APIConfig"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::VRCZ.VRChatApi.Generated.Models.APIConfig CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::VRCZ.VRChatApi.Generated.Models.APIConfig();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accessLogsUrls", n => { AccessLogsUrls = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfig_accessLogsUrls>(global::VRCZ.VRChatApi.Generated.Models.APIConfig_accessLogsUrls.CreateFromDiscriminatorValue); } },
                { "address", n => { Address = n.GetStringValue(); } },
                { "ageVerificationInviteVisible", n => { AgeVerificationInviteVisible = n.GetBoolValue(); } },
                { "ageVerificationP", n => { AgeVerificationP = n.GetBoolValue(); } },
                { "ageVerificationStatusVisible", n => { AgeVerificationStatusVisible = n.GetBoolValue(); } },
                { "analysisMaxRetries", n => { AnalysisMaxRetries = n.GetIntValue(); } },
                { "analysisRetryInterval", n => { AnalysisRetryInterval = n.GetIntValue(); } },
                { "analyticsSegment_NewUI_PctOfUsers", n => { AnalyticsSegmentNewUIPctOfUsers = n.GetIntValue(); } },
                { "analyticsSegment_NewUI_Salt", n => { AnalyticsSegmentNewUISalt = n.GetStringValue(); } },
                { "announcements", n => { Announcements = n.GetCollectionOfObjectValues<global::VRCZ.VRChatApi.Generated.Models.APIConfigAnnouncement>(global::VRCZ.VRChatApi.Generated.Models.APIConfigAnnouncement.CreateFromDiscriminatorValue)?.AsList(); } },
                { "appName", n => { AppName = n.GetStringValue(); } },
                { "availableLanguageCodes", n => { AvailableLanguageCodes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "availableLanguages", n => { AvailableLanguages = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "avatarPerfLimiter", n => { AvatarPerfLimiter = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfig_avatarPerfLimiter>(global::VRCZ.VRChatApi.Generated.Models.APIConfig_avatarPerfLimiter.CreateFromDiscriminatorValue); } },
                { "buildVersionTag", n => { BuildVersionTag = n.GetStringValue(); } },
                { "chatboxLogBufferSeconds", n => { ChatboxLogBufferSeconds = n.GetIntValue(); } },
                { "clientApiKey", n => { ClientApiKey = n.GetStringValue(); } },
                { "clientBPSCeiling", n => { ClientBPSCeiling = n.GetIntValue(); } },
                { "clientDisconnectTimeout", n => { ClientDisconnectTimeout = n.GetIntValue(); } },
                { "clientNetDispatchThread", n => { ClientNetDispatchThread = n.GetBoolValue(); } },
                { "clientNetDispatchThreadMobile", n => { ClientNetDispatchThreadMobile = n.GetBoolValue(); } },
                { "clientNetInThread", n => { ClientNetInThread = n.GetBoolValue(); } },
                { "clientNetInThread2", n => { ClientNetInThread2 = n.GetBoolValue(); } },
                { "clientNetInThreadMobile", n => { ClientNetInThreadMobile = n.GetBoolValue(); } },
                { "clientNetInThreadMobile2", n => { ClientNetInThreadMobile2 = n.GetBoolValue(); } },
                { "clientNetOutThread", n => { ClientNetOutThread = n.GetBoolValue(); } },
                { "clientNetOutThread2", n => { ClientNetOutThread2 = n.GetBoolValue(); } },
                { "clientNetOutThreadMobile", n => { ClientNetOutThreadMobile = n.GetBoolValue(); } },
                { "clientNetOutThreadMobile2", n => { ClientNetOutThreadMobile2 = n.GetBoolValue(); } },
                { "clientQR", n => { ClientQR = n.GetIntValue(); } },
                { "clientReservedPlayerBPS", n => { ClientReservedPlayerBPS = n.GetIntValue(); } },
                { "clientSentCountAllowance", n => { ClientSentCountAllowance = n.GetIntValue(); } },
                { "constants", n => { Constants = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfigConstants>(global::VRCZ.VRChatApi.Generated.Models.APIConfigConstants.CreateFromDiscriminatorValue); } },
                { "contactEmail", n => { ContactEmail = n.GetStringValue(); } },
                { "copyrightEmail", n => { CopyrightEmail = n.GetStringValue(); } },
                { "currentPrivacyVersion", n => { CurrentPrivacyVersion = n.GetIntValue(); } },
                { "currentTOSVersion", n => { CurrentTOSVersion = n.GetIntValue(); } },
                { "defaultAvatar", n => { DefaultAvatar = n.GetStringValue(); } },
                { "defaultStickerSet", n => { DefaultStickerSet = n.GetStringValue(); } },
                { "deploymentGroup", n => { DeploymentGroup = n.GetEnumValue<global::VRCZ.VRChatApi.Generated.Models.DeploymentGroup>(); } },
                { "devLanguageCodes", n => { DevLanguageCodes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "devSdkUrl", n => { DevSdkUrl = n.GetStringValue(); } },
                { "devSdkVersion", n => { DevSdkVersion = n.GetStringValue(); } },
                { "dis-countdown", n => { DisCountdown = n.GetDateTimeOffsetValue(); } },
                { "disableAVProInProton", n => { DisableAVProInProton = n.GetBoolValue(); } },
                { "disableAvatarCopying", n => { DisableAvatarCopying = n.GetBoolValue(); } },
                { "disableAvatarGating", n => { DisableAvatarGating = n.GetBoolValue(); } },
                { "disableCaptcha", n => { DisableCaptcha = n.GetBoolValue(); } },
                { "disableCommunityLabs", n => { DisableCommunityLabs = n.GetBoolValue(); } },
                { "disableCommunityLabsPromotion", n => { DisableCommunityLabsPromotion = n.GetBoolValue(); } },
                { "disableEmail", n => { DisableEmail = n.GetBoolValue(); } },
                { "disableEventStream", n => { DisableEventStream = n.GetBoolValue(); } },
                { "disableFeedbackGating", n => { DisableFeedbackGating = n.GetBoolValue(); } },
                { "disableFrontendBuilds", n => { DisableFrontendBuilds = n.GetBoolValue(); } },
                { "disableGiftDrops", n => { DisableGiftDrops = n.GetBoolValue(); } },
                { "disableHello", n => { DisableHello = n.GetBoolValue(); } },
                { "disableOculusSubs", n => { DisableOculusSubs = n.GetBoolValue(); } },
                { "disableRegistration", n => { DisableRegistration = n.GetBoolValue(); } },
                { "disableSteamNetworking", n => { DisableSteamNetworking = n.GetBoolValue(); } },
                { "disableTwoFactorAuth", n => { DisableTwoFactorAuth = n.GetBoolValue(); } },
                { "disableUdon", n => { DisableUdon = n.GetBoolValue(); } },
                { "disableUpgradeAccount", n => { DisableUpgradeAccount = n.GetBoolValue(); } },
                { "downloadLinkWindows", n => { DownloadLinkWindows = n.GetStringValue(); } },
                { "downloadUrls", n => { DownloadUrls = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfigDownloadURLList>(global::VRCZ.VRChatApi.Generated.Models.APIConfigDownloadURLList.CreateFromDiscriminatorValue); } },
                { "dynamicWorldRows", n => { DynamicWorldRows = n.GetCollectionOfObjectValues<global::VRCZ.VRChatApi.Generated.Models.DynamicContentRow>(global::VRCZ.VRChatApi.Generated.Models.DynamicContentRow.CreateFromDiscriminatorValue)?.AsList(); } },
                { "economyPauseEnd", n => { EconomyPauseEnd = n.GetStringValue(); } },
                { "economyPauseStart", n => { EconomyPauseStart = n.GetStringValue(); } },
                { "economyState", n => { EconomyState = n.GetIntValue(); } },
                { "events", n => { Events = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfigEvents>(global::VRCZ.VRChatApi.Generated.Models.APIConfigEvents.CreateFromDiscriminatorValue); } },
                { "forceUseLatestWorld", n => { ForceUseLatestWorld = n.GetBoolValue(); } },
                { "giftDisplayType", n => { GiftDisplayType = n.GetStringValue(); } },
                { "googleApiClientId", n => { GoogleApiClientId = n.GetStringValue(); } },
                { "homeWorldId", n => { HomeWorldId = n.GetStringValue(); } },
                { "homepageRedirectTarget", n => { HomepageRedirectTarget = n.GetStringValue(); } },
                { "hubWorldId", n => { HubWorldId = n.GetStringValue(); } },
                { "imageHostUrlList", n => { ImageHostUrlList = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "jobsEmail", n => { JobsEmail = n.GetStringValue(); } },
                { "minSupportedClientBuildNumber", n => { MinSupportedClientBuildNumber = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfig_minSupportedClientBuildNumber>(global::VRCZ.VRChatApi.Generated.Models.APIConfig_minSupportedClientBuildNumber.CreateFromDiscriminatorValue); } },
                { "minimumUnityVersionForUploads", n => { MinimumUnityVersionForUploads = n.GetStringValue(); } },
                { "moderationEmail", n => { ModerationEmail = n.GetStringValue(); } },
                { "notAllowedToSelectAvatarInPrivateWorldMessage", n => { NotAllowedToSelectAvatarInPrivateWorldMessage = n.GetStringValue(); } },
                { "offlineAnalysis", n => { OfflineAnalysis = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfig_offlineAnalysis>(global::VRCZ.VRChatApi.Generated.Models.APIConfig_offlineAnalysis.CreateFromDiscriminatorValue); } },
                { "photonNameserverOverrides", n => { PhotonNameserverOverrides = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "photonPublicKeys", n => { PhotonPublicKeys = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "player-url-resolver-sha1", n => { PlayerUrlResolverSha1 = n.GetStringValue(); } },
                { "player-url-resolver-version", n => { PlayerUrlResolverVersion = n.GetStringValue(); } },
                { "reportCategories", n => { ReportCategories = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportCategories>(global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportCategories.CreateFromDiscriminatorValue); } },
                { "reportFormUrl", n => { ReportFormUrl = n.GetStringValue(); } },
                { "reportOptions", n => { ReportOptions = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportOptions>(global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportOptions.CreateFromDiscriminatorValue); } },
                { "reportReasons", n => { ReportReasons = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportReasons>(global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportReasons.CreateFromDiscriminatorValue); } },
                { "requireAgeVerificationBetaTag", n => { RequireAgeVerificationBetaTag = n.GetBoolValue(); } },
                { "sdkDeveloperFaqUrl", n => { SdkDeveloperFaqUrl = n.GetStringValue(); } },
                { "sdkDiscordUrl", n => { SdkDiscordUrl = n.GetStringValue(); } },
                { "sdkNotAllowedToPublishMessage", n => { SdkNotAllowedToPublishMessage = n.GetStringValue(); } },
                { "sdkUnityVersion", n => { SdkUnityVersion = n.GetStringValue(); } },
                { "serverName", n => { ServerName = n.GetStringValue(); } },
                { "stringHostUrlList", n => { StringHostUrlList = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "supportEmail", n => { SupportEmail = n.GetStringValue(); } },
                { "supportFormUrl", n => { SupportFormUrl = n.GetStringValue(); } },
                { "timeOutWorldId", n => { TimeOutWorldId = n.GetStringValue(); } },
                { "timekeeping", n => { Timekeeping = n.GetBoolValue(); } },
                { "tutorialWorldId", n => { TutorialWorldId = n.GetStringValue(); } },
                { "updateRateMsMaximum", n => { UpdateRateMsMaximum = n.GetIntValue(); } },
                { "updateRateMsMinimum", n => { UpdateRateMsMinimum = n.GetIntValue(); } },
                { "updateRateMsNormal", n => { UpdateRateMsNormal = n.GetIntValue(); } },
                { "updateRateMsUdonManual", n => { UpdateRateMsUdonManual = n.GetIntValue(); } },
                { "uploadAnalysisPercent", n => { UploadAnalysisPercent = n.GetIntValue(); } },
                { "urlList", n => { UrlList = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "useReliableUdpForVoice", n => { UseReliableUdpForVoice = n.GetBoolValue(); } },
                { "viveWindowsUrl", n => { ViveWindowsUrl = n.GetStringValue(); } },
                { "VoiceEnableDegradation", n => { VoiceEnableDegradation = n.GetBoolValue(); } },
                { "VoiceEnableReceiverLimiting", n => { VoiceEnableReceiverLimiting = n.GetBoolValue(); } },
                { "websocketMaxFriendsRefreshDelay", n => { WebsocketMaxFriendsRefreshDelay = n.GetIntValue(); } },
                { "websocketQuickReconnectTime", n => { WebsocketQuickReconnectTime = n.GetIntValue(); } },
                { "websocketReconnectMaxDelay", n => { WebsocketReconnectMaxDelay = n.GetIntValue(); } },
                { "whiteListedAssetUrls", n => { WhiteListedAssetUrls = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfig_accessLogsUrls>("accessLogsUrls", AccessLogsUrls);
            writer.WriteStringValue("address", Address);
            writer.WriteBoolValue("ageVerificationInviteVisible", AgeVerificationInviteVisible);
            writer.WriteBoolValue("ageVerificationP", AgeVerificationP);
            writer.WriteBoolValue("ageVerificationStatusVisible", AgeVerificationStatusVisible);
            writer.WriteIntValue("analysisMaxRetries", AnalysisMaxRetries);
            writer.WriteIntValue("analysisRetryInterval", AnalysisRetryInterval);
            writer.WriteIntValue("analyticsSegment_NewUI_PctOfUsers", AnalyticsSegmentNewUIPctOfUsers);
            writer.WriteStringValue("analyticsSegment_NewUI_Salt", AnalyticsSegmentNewUISalt);
            writer.WriteCollectionOfObjectValues<global::VRCZ.VRChatApi.Generated.Models.APIConfigAnnouncement>("announcements", Announcements);
            writer.WriteStringValue("appName", AppName);
            writer.WriteCollectionOfPrimitiveValues<string>("availableLanguageCodes", AvailableLanguageCodes);
            writer.WriteCollectionOfPrimitiveValues<string>("availableLanguages", AvailableLanguages);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfig_avatarPerfLimiter>("avatarPerfLimiter", AvatarPerfLimiter);
            writer.WriteStringValue("buildVersionTag", BuildVersionTag);
            writer.WriteIntValue("chatboxLogBufferSeconds", ChatboxLogBufferSeconds);
            writer.WriteStringValue("clientApiKey", ClientApiKey);
            writer.WriteIntValue("clientBPSCeiling", ClientBPSCeiling);
            writer.WriteIntValue("clientDisconnectTimeout", ClientDisconnectTimeout);
            writer.WriteBoolValue("clientNetDispatchThread", ClientNetDispatchThread);
            writer.WriteBoolValue("clientNetDispatchThreadMobile", ClientNetDispatchThreadMobile);
            writer.WriteBoolValue("clientNetInThread", ClientNetInThread);
            writer.WriteBoolValue("clientNetInThread2", ClientNetInThread2);
            writer.WriteBoolValue("clientNetInThreadMobile", ClientNetInThreadMobile);
            writer.WriteBoolValue("clientNetInThreadMobile2", ClientNetInThreadMobile2);
            writer.WriteBoolValue("clientNetOutThread", ClientNetOutThread);
            writer.WriteBoolValue("clientNetOutThread2", ClientNetOutThread2);
            writer.WriteBoolValue("clientNetOutThreadMobile", ClientNetOutThreadMobile);
            writer.WriteBoolValue("clientNetOutThreadMobile2", ClientNetOutThreadMobile2);
            writer.WriteIntValue("clientQR", ClientQR);
            writer.WriteIntValue("clientReservedPlayerBPS", ClientReservedPlayerBPS);
            writer.WriteIntValue("clientSentCountAllowance", ClientSentCountAllowance);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfigConstants>("constants", Constants);
            writer.WriteStringValue("contactEmail", ContactEmail);
            writer.WriteStringValue("copyrightEmail", CopyrightEmail);
            writer.WriteIntValue("currentPrivacyVersion", CurrentPrivacyVersion);
            writer.WriteIntValue("currentTOSVersion", CurrentTOSVersion);
            writer.WriteStringValue("defaultAvatar", DefaultAvatar);
            writer.WriteStringValue("defaultStickerSet", DefaultStickerSet);
            writer.WriteEnumValue<global::VRCZ.VRChatApi.Generated.Models.DeploymentGroup>("deploymentGroup", DeploymentGroup);
            writer.WriteCollectionOfPrimitiveValues<string>("devLanguageCodes", DevLanguageCodes);
            writer.WriteStringValue("devSdkUrl", DevSdkUrl);
            writer.WriteStringValue("devSdkVersion", DevSdkVersion);
            writer.WriteBoolValue("disableAvatarCopying", DisableAvatarCopying);
            writer.WriteBoolValue("disableAvatarGating", DisableAvatarGating);
            writer.WriteBoolValue("disableAVProInProton", DisableAVProInProton);
            writer.WriteBoolValue("disableCaptcha", DisableCaptcha);
            writer.WriteBoolValue("disableCommunityLabs", DisableCommunityLabs);
            writer.WriteBoolValue("disableCommunityLabsPromotion", DisableCommunityLabsPromotion);
            writer.WriteBoolValue("disableEmail", DisableEmail);
            writer.WriteBoolValue("disableEventStream", DisableEventStream);
            writer.WriteBoolValue("disableFeedbackGating", DisableFeedbackGating);
            writer.WriteBoolValue("disableFrontendBuilds", DisableFrontendBuilds);
            writer.WriteBoolValue("disableGiftDrops", DisableGiftDrops);
            writer.WriteBoolValue("disableHello", DisableHello);
            writer.WriteBoolValue("disableOculusSubs", DisableOculusSubs);
            writer.WriteBoolValue("disableRegistration", DisableRegistration);
            writer.WriteBoolValue("disableSteamNetworking", DisableSteamNetworking);
            writer.WriteBoolValue("disableTwoFactorAuth", DisableTwoFactorAuth);
            writer.WriteBoolValue("disableUdon", DisableUdon);
            writer.WriteBoolValue("disableUpgradeAccount", DisableUpgradeAccount);
            writer.WriteDateTimeOffsetValue("dis-countdown", DisCountdown);
            writer.WriteStringValue("downloadLinkWindows", DownloadLinkWindows);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfigDownloadURLList>("downloadUrls", DownloadUrls);
            writer.WriteCollectionOfObjectValues<global::VRCZ.VRChatApi.Generated.Models.DynamicContentRow>("dynamicWorldRows", DynamicWorldRows);
            writer.WriteStringValue("economyPauseEnd", EconomyPauseEnd);
            writer.WriteStringValue("economyPauseStart", EconomyPauseStart);
            writer.WriteIntValue("economyState", EconomyState);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfigEvents>("events", Events);
            writer.WriteBoolValue("forceUseLatestWorld", ForceUseLatestWorld);
            writer.WriteStringValue("giftDisplayType", GiftDisplayType);
            writer.WriteStringValue("googleApiClientId", GoogleApiClientId);
            writer.WriteStringValue("homepageRedirectTarget", HomepageRedirectTarget);
            writer.WriteStringValue("homeWorldId", HomeWorldId);
            writer.WriteStringValue("hubWorldId", HubWorldId);
            writer.WriteCollectionOfPrimitiveValues<string>("imageHostUrlList", ImageHostUrlList);
            writer.WriteStringValue("jobsEmail", JobsEmail);
            writer.WriteStringValue("minimumUnityVersionForUploads", MinimumUnityVersionForUploads);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfig_minSupportedClientBuildNumber>("minSupportedClientBuildNumber", MinSupportedClientBuildNumber);
            writer.WriteStringValue("moderationEmail", ModerationEmail);
            writer.WriteStringValue("notAllowedToSelectAvatarInPrivateWorldMessage", NotAllowedToSelectAvatarInPrivateWorldMessage);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfig_offlineAnalysis>("offlineAnalysis", OfflineAnalysis);
            writer.WriteCollectionOfPrimitiveValues<string>("photonNameserverOverrides", PhotonNameserverOverrides);
            writer.WriteCollectionOfPrimitiveValues<string>("photonPublicKeys", PhotonPublicKeys);
            writer.WriteStringValue("player-url-resolver-sha1", PlayerUrlResolverSha1);
            writer.WriteStringValue("player-url-resolver-version", PlayerUrlResolverVersion);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportCategories>("reportCategories", ReportCategories);
            writer.WriteStringValue("reportFormUrl", ReportFormUrl);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportOptions>("reportOptions", ReportOptions);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportReasons>("reportReasons", ReportReasons);
            writer.WriteBoolValue("requireAgeVerificationBetaTag", RequireAgeVerificationBetaTag);
            writer.WriteStringValue("sdkDeveloperFaqUrl", SdkDeveloperFaqUrl);
            writer.WriteStringValue("sdkDiscordUrl", SdkDiscordUrl);
            writer.WriteStringValue("sdkNotAllowedToPublishMessage", SdkNotAllowedToPublishMessage);
            writer.WriteStringValue("sdkUnityVersion", SdkUnityVersion);
            writer.WriteStringValue("serverName", ServerName);
            writer.WriteCollectionOfPrimitiveValues<string>("stringHostUrlList", StringHostUrlList);
            writer.WriteStringValue("supportEmail", SupportEmail);
            writer.WriteStringValue("supportFormUrl", SupportFormUrl);
            writer.WriteBoolValue("timekeeping", Timekeeping);
            writer.WriteStringValue("timeOutWorldId", TimeOutWorldId);
            writer.WriteStringValue("tutorialWorldId", TutorialWorldId);
            writer.WriteIntValue("updateRateMsMaximum", UpdateRateMsMaximum);
            writer.WriteIntValue("updateRateMsMinimum", UpdateRateMsMinimum);
            writer.WriteIntValue("updateRateMsNormal", UpdateRateMsNormal);
            writer.WriteIntValue("updateRateMsUdonManual", UpdateRateMsUdonManual);
            writer.WriteIntValue("uploadAnalysisPercent", UploadAnalysisPercent);
            writer.WriteCollectionOfPrimitiveValues<string>("urlList", UrlList);
            writer.WriteBoolValue("useReliableUdpForVoice", UseReliableUdpForVoice);
            writer.WriteStringValue("viveWindowsUrl", ViveWindowsUrl);
            writer.WriteBoolValue("VoiceEnableDegradation", VoiceEnableDegradation);
            writer.WriteBoolValue("VoiceEnableReceiverLimiting", VoiceEnableReceiverLimiting);
            writer.WriteIntValue("websocketMaxFriendsRefreshDelay", WebsocketMaxFriendsRefreshDelay);
            writer.WriteIntValue("websocketQuickReconnectTime", WebsocketQuickReconnectTime);
            writer.WriteIntValue("websocketReconnectMaxDelay", WebsocketReconnectMaxDelay);
            writer.WriteCollectionOfPrimitiveValues<string>("whiteListedAssetUrls", WhiteListedAssetUrls);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
