// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace VRCZ.VRChatApi.Generated.Models
{
    /// <summary>
    /// Categories available for reporting objectionable content
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class APIConfig_reportCategories : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A category used for reporting content</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory? Avatar { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory Avatar { get; set; }
#endif
        /// <summary>A category used for reporting content</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory? Behavior { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory Behavior { get; set; }
#endif
        /// <summary>A category used for reporting content</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory? Chat { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory Chat { get; set; }
#endif
        /// <summary>A category used for reporting content</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory? Emoji { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory Emoji { get; set; }
#endif
        /// <summary>A category used for reporting content</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory? Environment { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory Environment { get; set; }
#endif
        /// <summary>A category used for reporting content</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory? Groupstore { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory Groupstore { get; set; }
#endif
        /// <summary>A category used for reporting content</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory? Image { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory Image { get; set; }
#endif
        /// <summary>A category used for reporting content</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory? Sticker { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory Sticker { get; set; }
#endif
        /// <summary>A category used for reporting content</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory? Text { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory Text { get; set; }
#endif
        /// <summary>A category used for reporting content</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory? Warnings { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory Warnings { get; set; }
#endif
        /// <summary>A category used for reporting content</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory? Worldimage { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory Worldimage { get; set; }
#endif
        /// <summary>A category used for reporting content</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory? Worldstore { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.ReportCategory Worldstore { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportCategories"/> and sets the default values.
        /// </summary>
        public APIConfig_reportCategories()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportCategories"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportCategories CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::VRCZ.VRChatApi.Generated.Models.APIConfig_reportCategories();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "avatar", n => { Avatar = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>(global::VRCZ.VRChatApi.Generated.Models.ReportCategory.CreateFromDiscriminatorValue); } },
                { "behavior", n => { Behavior = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>(global::VRCZ.VRChatApi.Generated.Models.ReportCategory.CreateFromDiscriminatorValue); } },
                { "chat", n => { Chat = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>(global::VRCZ.VRChatApi.Generated.Models.ReportCategory.CreateFromDiscriminatorValue); } },
                { "emoji", n => { Emoji = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>(global::VRCZ.VRChatApi.Generated.Models.ReportCategory.CreateFromDiscriminatorValue); } },
                { "environment", n => { Environment = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>(global::VRCZ.VRChatApi.Generated.Models.ReportCategory.CreateFromDiscriminatorValue); } },
                { "groupstore", n => { Groupstore = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>(global::VRCZ.VRChatApi.Generated.Models.ReportCategory.CreateFromDiscriminatorValue); } },
                { "image", n => { Image = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>(global::VRCZ.VRChatApi.Generated.Models.ReportCategory.CreateFromDiscriminatorValue); } },
                { "sticker", n => { Sticker = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>(global::VRCZ.VRChatApi.Generated.Models.ReportCategory.CreateFromDiscriminatorValue); } },
                { "text", n => { Text = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>(global::VRCZ.VRChatApi.Generated.Models.ReportCategory.CreateFromDiscriminatorValue); } },
                { "warnings", n => { Warnings = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>(global::VRCZ.VRChatApi.Generated.Models.ReportCategory.CreateFromDiscriminatorValue); } },
                { "worldimage", n => { Worldimage = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>(global::VRCZ.VRChatApi.Generated.Models.ReportCategory.CreateFromDiscriminatorValue); } },
                { "worldstore", n => { Worldstore = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>(global::VRCZ.VRChatApi.Generated.Models.ReportCategory.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>("avatar", Avatar);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>("behavior", Behavior);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>("chat", Chat);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>("emoji", Emoji);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>("environment", Environment);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>("groupstore", Groupstore);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>("image", Image);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>("sticker", Sticker);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>("text", Text);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>("warnings", Warnings);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>("worldimage", Worldimage);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.ReportCategory>("worldstore", Worldstore);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
