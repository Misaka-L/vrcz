// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace VRCZ.VRChatApi.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Transaction : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents a single Transaction, which is likely between VRChat and Steam.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.TransactionAgreement? Agreement { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.TransactionAgreement Agreement { get; set; }
#endif
        /// <summary>The created_at property</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The error property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Error { get; set; }
#nullable restore
#else
        public string Error { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The isGift property</summary>
        public bool? IsGift { get; set; }
        /// <summary>The isTokens property</summary>
        public bool? IsTokens { get; set; }
        /// <summary>The sandbox property</summary>
        public bool? Sandbox { get; set; }
        /// <summary>The status property</summary>
        public global::VRCZ.VRChatApi.Generated.Models.TransactionStatus? Status { get; set; }
        /// <summary>The steam property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.TransactionSteamInfo? Steam { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.TransactionSteamInfo Steam { get; set; }
#endif
        /// <summary>The subscription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.Subscription? Subscription { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.Subscription Subscription { get; set; }
#endif
        /// <summary>The updated_at property</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>The userDisplayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserDisplayName { get; set; }
#nullable restore
#else
        public string UserDisplayName { get; set; }
#endif
        /// <summary>A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Models.Transaction"/> and sets the default values.
        /// </summary>
        public Transaction()
        {
            AdditionalData = new Dictionary<string, object>();
            Status = global::VRCZ.VRChatApi.Generated.Models.TransactionStatus.Active;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.Transaction"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::VRCZ.VRChatApi.Generated.Models.Transaction CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::VRCZ.VRChatApi.Generated.Models.Transaction();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "agreement", n => { Agreement = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.TransactionAgreement>(global::VRCZ.VRChatApi.Generated.Models.TransactionAgreement.CreateFromDiscriminatorValue); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "error", n => { Error = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "isGift", n => { IsGift = n.GetBoolValue(); } },
                { "isTokens", n => { IsTokens = n.GetBoolValue(); } },
                { "sandbox", n => { Sandbox = n.GetBoolValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::VRCZ.VRChatApi.Generated.Models.TransactionStatus>(); } },
                { "steam", n => { Steam = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.TransactionSteamInfo>(global::VRCZ.VRChatApi.Generated.Models.TransactionSteamInfo.CreateFromDiscriminatorValue); } },
                { "subscription", n => { Subscription = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.Subscription>(global::VRCZ.VRChatApi.Generated.Models.Subscription.CreateFromDiscriminatorValue); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "userDisplayName", n => { UserDisplayName = n.GetStringValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.TransactionAgreement>("agreement", Agreement);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("error", Error);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isGift", IsGift);
            writer.WriteBoolValue("isTokens", IsTokens);
            writer.WriteBoolValue("sandbox", Sandbox);
            writer.WriteEnumValue<global::VRCZ.VRChatApi.Generated.Models.TransactionStatus>("status", Status);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.TransactionSteamInfo>("steam", Steam);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.Subscription>("subscription", Subscription);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteStringValue("userDisplayName", UserDisplayName);
            writer.WriteStringValue("userId", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
