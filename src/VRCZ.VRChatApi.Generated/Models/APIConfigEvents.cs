// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace VRCZ.VRChatApi.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class APIConfigEvents : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Unknown</summary>
        public int? DistanceClose { get; set; }
        /// <summary>Unknown</summary>
        public int? DistanceFactor { get; set; }
        /// <summary>Unknown</summary>
        public int? DistanceFar { get; set; }
        /// <summary>Unknown</summary>
        public int? GroupDistance { get; set; }
        /// <summary>Unknown</summary>
        public int? MaximumBunchSize { get; set; }
        /// <summary>Unknown</summary>
        public int? NotVisibleFactor { get; set; }
        /// <summary>Unknown</summary>
        public int? PlayerOrderBucketSize { get; set; }
        /// <summary>Unknown</summary>
        public int? PlayerOrderFactor { get; set; }
        /// <summary>Unknown</summary>
        public int? SlowUpdateFactorThreshold { get; set; }
        /// <summary>Unknown</summary>
        public int? ViewSegmentLength { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Models.APIConfigEvents"/> and sets the default values.
        /// </summary>
        public APIConfigEvents()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.APIConfigEvents"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::VRCZ.VRChatApi.Generated.Models.APIConfigEvents CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::VRCZ.VRChatApi.Generated.Models.APIConfigEvents();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "distanceClose", n => { DistanceClose = n.GetIntValue(); } },
                { "distanceFactor", n => { DistanceFactor = n.GetIntValue(); } },
                { "distanceFar", n => { DistanceFar = n.GetIntValue(); } },
                { "groupDistance", n => { GroupDistance = n.GetIntValue(); } },
                { "maximumBunchSize", n => { MaximumBunchSize = n.GetIntValue(); } },
                { "notVisibleFactor", n => { NotVisibleFactor = n.GetIntValue(); } },
                { "playerOrderBucketSize", n => { PlayerOrderBucketSize = n.GetIntValue(); } },
                { "playerOrderFactor", n => { PlayerOrderFactor = n.GetIntValue(); } },
                { "slowUpdateFactorThreshold", n => { SlowUpdateFactorThreshold = n.GetIntValue(); } },
                { "viewSegmentLength", n => { ViewSegmentLength = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("distanceClose", DistanceClose);
            writer.WriteIntValue("distanceFactor", DistanceFactor);
            writer.WriteIntValue("distanceFar", DistanceFar);
            writer.WriteIntValue("groupDistance", GroupDistance);
            writer.WriteIntValue("maximumBunchSize", MaximumBunchSize);
            writer.WriteIntValue("notVisibleFactor", NotVisibleFactor);
            writer.WriteIntValue("playerOrderBucketSize", PlayerOrderBucketSize);
            writer.WriteIntValue("playerOrderFactor", PlayerOrderFactor);
            writer.WriteIntValue("slowUpdateFactorThreshold", SlowUpdateFactorThreshold);
            writer.WriteIntValue("viewSegmentLength", ViewSegmentLength);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
