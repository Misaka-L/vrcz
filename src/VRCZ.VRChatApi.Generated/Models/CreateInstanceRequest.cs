// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace VRCZ.VRChatApi.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CreateInstanceRequest : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Only applies to invite type instances to make them invite+</summary>
        public bool? CanRequestInvite { get; set; }
        /// <summary>The time after which users won&apos;t be allowed to join the instance. This doesn&apos;t work for public instances.</summary>
        public DateTimeOffset? ClosedAt { get; set; }
        /// <summary>Group access type when the instance type is &quot;group&quot;</summary>
        public global::VRCZ.VRChatApi.Generated.Models.GroupAccessType? GroupAccessType { get; set; }
        /// <summary>Currently unused, but will eventually be a flag to set if the closing of the instance should kick people.</summary>
        public bool? HardClose { get; set; }
        /// <summary>The inviteOnly property</summary>
        public bool? InviteOnly { get; set; }
        /// <summary>A groupId if the instance type is &quot;group&quot;, null if instance type is public, or a userId otherwise</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OwnerId { get; set; }
#nullable restore
#else
        public string OwnerId { get; set; }
#endif
        /// <summary>The queueEnabled property</summary>
        public bool? QueueEnabled { get; set; }
        /// <summary>Instance region</summary>
        public global::VRCZ.VRChatApi.Generated.Models.InstanceRegion? Region { get; set; }
        /// <summary>Group roleIds that are allowed to join if the type is &quot;group&quot; and groupAccessType is &quot;member&quot;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RoleIds { get; set; }
#nullable restore
#else
        public List<string> RoleIds { get; set; }
#endif
        /// <summary>The type property</summary>
        public global::VRCZ.VRChatApi.Generated.Models.InstanceType? Type { get; set; }
        /// <summary>WorldID be &quot;offline&quot; on User profiles if you are not friends with that user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WorldId { get; set; }
#nullable restore
#else
        public string WorldId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Models.CreateInstanceRequest"/> and sets the default values.
        /// </summary>
        public CreateInstanceRequest()
        {
            AdditionalData = new Dictionary<string, object>();
            GroupAccessType = global::VRCZ.VRChatApi.Generated.Models.GroupAccessType.Members;
            Region = global::VRCZ.VRChatApi.Generated.Models.InstanceRegion.Us;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.CreateInstanceRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::VRCZ.VRChatApi.Generated.Models.CreateInstanceRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::VRCZ.VRChatApi.Generated.Models.CreateInstanceRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "canRequestInvite", n => { CanRequestInvite = n.GetBoolValue(); } },
                { "closedAt", n => { ClosedAt = n.GetDateTimeOffsetValue(); } },
                { "groupAccessType", n => { GroupAccessType = n.GetEnumValue<global::VRCZ.VRChatApi.Generated.Models.GroupAccessType>(); } },
                { "hardClose", n => { HardClose = n.GetBoolValue(); } },
                { "inviteOnly", n => { InviteOnly = n.GetBoolValue(); } },
                { "ownerId", n => { OwnerId = n.GetStringValue(); } },
                { "queueEnabled", n => { QueueEnabled = n.GetBoolValue(); } },
                { "region", n => { Region = n.GetEnumValue<global::VRCZ.VRChatApi.Generated.Models.InstanceRegion>(); } },
                { "roleIds", n => { RoleIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "type", n => { Type = n.GetEnumValue<global::VRCZ.VRChatApi.Generated.Models.InstanceType>(); } },
                { "worldId", n => { WorldId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("canRequestInvite", CanRequestInvite);
            writer.WriteDateTimeOffsetValue("closedAt", ClosedAt);
            writer.WriteEnumValue<global::VRCZ.VRChatApi.Generated.Models.GroupAccessType>("groupAccessType", GroupAccessType);
            writer.WriteBoolValue("hardClose", HardClose);
            writer.WriteBoolValue("inviteOnly", InviteOnly);
            writer.WriteStringValue("ownerId", OwnerId);
            writer.WriteBoolValue("queueEnabled", QueueEnabled);
            writer.WriteEnumValue<global::VRCZ.VRChatApi.Generated.Models.InstanceRegion>("region", Region);
            writer.WriteCollectionOfPrimitiveValues<string>("roleIds", RoleIds);
            writer.WriteEnumValue<global::VRCZ.VRChatApi.Generated.Models.InstanceType>("type", Type);
            writer.WriteStringValue("worldId", WorldId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
