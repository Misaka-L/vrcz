// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace VRCZ.VRChatApi.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UnityPackage : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The assetUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssetUrl { get; set; }
#nullable restore
#else
        public string AssetUrl { get; set; }
#endif
        /// <summary>The assetUrlObject property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.UnityPackage_assetUrlObject? AssetUrlObject { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.UnityPackage_assetUrlObject AssetUrlObject { get; set; }
#endif
        /// <summary>The assetVersion property</summary>
        public int? AssetVersion { get; set; }
        /// <summary>The created_at property</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The impostorizerVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImpostorizerVersion { get; set; }
#nullable restore
#else
        public string ImpostorizerVersion { get; set; }
#endif
        /// <summary>The impostorUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImpostorUrl { get; set; }
#nullable restore
#else
        public string ImpostorUrl { get; set; }
#endif
        /// <summary>Avatar Performance ratings.</summary>
        public global::VRCZ.VRChatApi.Generated.Models.PerformanceRatings? PerformanceRating { get; set; }
        /// <summary>This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Platform { get; set; }
#nullable restore
#else
        public string Platform { get; set; }
#endif
        /// <summary>The pluginUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PluginUrl { get; set; }
#nullable restore
#else
        public string PluginUrl { get; set; }
#endif
        /// <summary>The pluginUrlObject property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::VRCZ.VRChatApi.Generated.Models.UnityPackage_pluginUrlObject? PluginUrlObject { get; set; }
#nullable restore
#else
        public global::VRCZ.VRChatApi.Generated.Models.UnityPackage_pluginUrlObject PluginUrlObject { get; set; }
#endif
        /// <summary>The scanStatus property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ScanStatus { get; set; }
#nullable restore
#else
        public string ScanStatus { get; set; }
#endif
        /// <summary>The unitySortNumber property</summary>
        public long? UnitySortNumber { get; set; }
        /// <summary>The unityVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnityVersion { get; set; }
#nullable restore
#else
        public string UnityVersion { get; set; }
#endif
        /// <summary>The variant property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Variant { get; set; }
#nullable restore
#else
        public string Variant { get; set; }
#endif
        /// <summary>The worldSignature property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WorldSignature { get; set; }
#nullable restore
#else
        public string WorldSignature { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Models.UnityPackage"/> and sets the default values.
        /// </summary>
        public UnityPackage()
        {
            AdditionalData = new Dictionary<string, object>();
            UnityVersion = "5.3.4p1";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.UnityPackage"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::VRCZ.VRChatApi.Generated.Models.UnityPackage CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::VRCZ.VRChatApi.Generated.Models.UnityPackage();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assetUrl", n => { AssetUrl = n.GetStringValue(); } },
                { "assetUrlObject", n => { AssetUrlObject = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.UnityPackage_assetUrlObject>(global::VRCZ.VRChatApi.Generated.Models.UnityPackage_assetUrlObject.CreateFromDiscriminatorValue); } },
                { "assetVersion", n => { AssetVersion = n.GetIntValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "impostorUrl", n => { ImpostorUrl = n.GetStringValue(); } },
                { "impostorizerVersion", n => { ImpostorizerVersion = n.GetStringValue(); } },
                { "performanceRating", n => { PerformanceRating = n.GetEnumValue<global::VRCZ.VRChatApi.Generated.Models.PerformanceRatings>(); } },
                { "platform", n => { Platform = n.GetStringValue(); } },
                { "pluginUrl", n => { PluginUrl = n.GetStringValue(); } },
                { "pluginUrlObject", n => { PluginUrlObject = n.GetObjectValue<global::VRCZ.VRChatApi.Generated.Models.UnityPackage_pluginUrlObject>(global::VRCZ.VRChatApi.Generated.Models.UnityPackage_pluginUrlObject.CreateFromDiscriminatorValue); } },
                { "scanStatus", n => { ScanStatus = n.GetStringValue(); } },
                { "unitySortNumber", n => { UnitySortNumber = n.GetLongValue(); } },
                { "unityVersion", n => { UnityVersion = n.GetStringValue(); } },
                { "variant", n => { Variant = n.GetStringValue(); } },
                { "worldSignature", n => { WorldSignature = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("assetUrl", AssetUrl);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.UnityPackage_assetUrlObject>("assetUrlObject", AssetUrlObject);
            writer.WriteIntValue("assetVersion", AssetVersion);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("impostorizerVersion", ImpostorizerVersion);
            writer.WriteStringValue("impostorUrl", ImpostorUrl);
            writer.WriteEnumValue<global::VRCZ.VRChatApi.Generated.Models.PerformanceRatings>("performanceRating", PerformanceRating);
            writer.WriteStringValue("platform", Platform);
            writer.WriteStringValue("pluginUrl", PluginUrl);
            writer.WriteObjectValue<global::VRCZ.VRChatApi.Generated.Models.UnityPackage_pluginUrlObject>("pluginUrlObject", PluginUrlObject);
            writer.WriteStringValue("scanStatus", ScanStatus);
            writer.WriteLongValue("unitySortNumber", UnitySortNumber);
            writer.WriteStringValue("unityVersion", UnityVersion);
            writer.WriteStringValue("variant", Variant);
            writer.WriteStringValue("worldSignature", WorldSignature);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
