// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace VRCZ.VRChatApi.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class GroupMyMember : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The acceptedByDisplayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AcceptedByDisplayName { get; set; }
#nullable restore
#else
        public string AcceptedByDisplayName { get; set; }
#endif
        /// <summary>The acceptedById property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AcceptedById { get; set; }
#nullable restore
#else
        public string AcceptedById { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bannedAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BannedAt { get; set; }
#nullable restore
#else
        public string BannedAt { get; set; }
#endif
        /// <summary>The createdAt property</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The groupId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GroupId { get; set; }
#nullable restore
#else
        public string GroupId { get; set; }
#endif
        /// <summary>The has2FA property</summary>
        public bool? Has2FA { get; set; }
        /// <summary>The hasJoinedFromPurchase property</summary>
        public bool? HasJoinedFromPurchase { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The isRepresenting property</summary>
        public bool? IsRepresenting { get; set; }
        /// <summary>The isSubscribedToAnnouncements property</summary>
        public bool? IsSubscribedToAnnouncements { get; set; }
        /// <summary>The joinedAt property</summary>
        public DateTimeOffset? JoinedAt { get; set; }
        /// <summary>The lastPostReadAt property</summary>
        public DateTimeOffset? LastPostReadAt { get; set; }
        /// <summary>The managerNotes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ManagerNotes { get; set; }
#nullable restore
#else
        public string ManagerNotes { get; set; }
#endif
        /// <summary>The membershipStatus property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MembershipStatus { get; set; }
#nullable restore
#else
        public string MembershipStatus { get; set; }
#endif
        /// <summary>The mRoleIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MRoleIds { get; set; }
#nullable restore
#else
        public List<string> MRoleIds { get; set; }
#endif
        /// <summary>The permissions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::VRCZ.VRChatApi.Generated.Models.GroupPermissions?>? Permissions { get; set; }
#nullable restore
#else
        public List<global::VRCZ.VRChatApi.Generated.Models.GroupPermissions?> Permissions { get; set; }
#endif
        /// <summary>The roleIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RoleIds { get; set; }
#nullable restore
#else
        public List<string> RoleIds { get; set; }
#endif
        /// <summary>A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>The visibility property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Visibility { get; set; }
#nullable restore
#else
        public string Visibility { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Models.GroupMyMember"/> and sets the default values.
        /// </summary>
        public GroupMyMember()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.GroupMyMember"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::VRCZ.VRChatApi.Generated.Models.GroupMyMember CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::VRCZ.VRChatApi.Generated.Models.GroupMyMember();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "acceptedByDisplayName", n => { AcceptedByDisplayName = n.GetStringValue(); } },
                { "acceptedById", n => { AcceptedById = n.GetStringValue(); } },
                { "bannedAt", n => { BannedAt = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "groupId", n => { GroupId = n.GetStringValue(); } },
                { "has2FA", n => { Has2FA = n.GetBoolValue(); } },
                { "hasJoinedFromPurchase", n => { HasJoinedFromPurchase = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "isRepresenting", n => { IsRepresenting = n.GetBoolValue(); } },
                { "isSubscribedToAnnouncements", n => { IsSubscribedToAnnouncements = n.GetBoolValue(); } },
                { "joinedAt", n => { JoinedAt = n.GetDateTimeOffsetValue(); } },
                { "lastPostReadAt", n => { LastPostReadAt = n.GetDateTimeOffsetValue(); } },
                { "mRoleIds", n => { MRoleIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "managerNotes", n => { ManagerNotes = n.GetStringValue(); } },
                { "membershipStatus", n => { MembershipStatus = n.GetStringValue(); } },
                { "permissions", n => { Permissions = n.GetCollectionOfEnumValues<global::VRCZ.VRChatApi.Generated.Models.GroupPermissions>()?.AsList(); } },
                { "roleIds", n => { RoleIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
                { "visibility", n => { Visibility = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("acceptedByDisplayName", AcceptedByDisplayName);
            writer.WriteStringValue("acceptedById", AcceptedById);
            writer.WriteStringValue("bannedAt", BannedAt);
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteStringValue("groupId", GroupId);
            writer.WriteBoolValue("has2FA", Has2FA);
            writer.WriteBoolValue("hasJoinedFromPurchase", HasJoinedFromPurchase);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isRepresenting", IsRepresenting);
            writer.WriteBoolValue("isSubscribedToAnnouncements", IsSubscribedToAnnouncements);
            writer.WriteDateTimeOffsetValue("joinedAt", JoinedAt);
            writer.WriteDateTimeOffsetValue("lastPostReadAt", LastPostReadAt);
            writer.WriteStringValue("managerNotes", ManagerNotes);
            writer.WriteStringValue("membershipStatus", MembershipStatus);
            writer.WriteCollectionOfPrimitiveValues<string>("mRoleIds", MRoleIds);
            writer.WriteCollectionOfEnumValues<global::VRCZ.VRChatApi.Generated.Models.GroupPermissions>("permissions", Permissions);
            writer.WriteCollectionOfPrimitiveValues<string>("roleIds", RoleIds);
            writer.WriteStringValue("userId", UserId);
            writer.WriteStringValue("visibility", Visibility);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
