// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace VRCZ.VRChatApi.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Product : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The archived property</summary>
        public bool? Archived { get; set; }
        /// <summary>The created property</summary>
        public DateTimeOffset? Created { get; set; }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The displayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The groupAccess property</summary>
        public bool? GroupAccess { get; set; }
        /// <summary>The groupAccessRemove property</summary>
        public bool? GroupAccessRemove { get; set; }
        /// <summary>The groupId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GroupId { get; set; }
#nullable restore
#else
        public string GroupId { get; set; }
#endif
        /// <summary>The groupRoleId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GroupRoleId { get; set; }
#nullable restore
#else
        public string GroupRoleId { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The imageId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageId { get; set; }
#nullable restore
#else
        public string ImageId { get; set; }
#endif
        /// <summary>The parentListings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ParentListings { get; set; }
#nullable restore
#else
        public List<string> ParentListings { get; set; }
#endif
        /// <summary>The productType property</summary>
        public global::VRCZ.VRChatApi.Generated.Models.ProductType? ProductType { get; set; }
        /// <summary>The sellerDisplayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SellerDisplayName { get; set; }
#nullable restore
#else
        public string SellerDisplayName { get; set; }
#endif
        /// <summary>The sellerId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SellerId { get; set; }
#nullable restore
#else
        public string SellerId { get; set; }
#endif
        /// <summary>The tags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The updated property</summary>
        public DateTimeOffset? Updated { get; set; }
        /// <summary>The useForSubscriberList property</summary>
        public bool? UseForSubscriberList { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Models.Product"/> and sets the default values.
        /// </summary>
        public Product()
        {
            AdditionalData = new Dictionary<string, object>();
            ProductType = global::VRCZ.VRChatApi.Generated.Models.ProductType.Udon;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.Product"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::VRCZ.VRChatApi.Generated.Models.Product CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::VRCZ.VRChatApi.Generated.Models.Product();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "archived", n => { Archived = n.GetBoolValue(); } },
                { "created", n => { Created = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "groupAccess", n => { GroupAccess = n.GetBoolValue(); } },
                { "groupAccessRemove", n => { GroupAccessRemove = n.GetBoolValue(); } },
                { "groupId", n => { GroupId = n.GetStringValue(); } },
                { "groupRoleId", n => { GroupRoleId = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "imageId", n => { ImageId = n.GetStringValue(); } },
                { "parentListings", n => { ParentListings = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "productType", n => { ProductType = n.GetEnumValue<global::VRCZ.VRChatApi.Generated.Models.ProductType>(); } },
                { "sellerDisplayName", n => { SellerDisplayName = n.GetStringValue(); } },
                { "sellerId", n => { SellerId = n.GetStringValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "updated", n => { Updated = n.GetDateTimeOffsetValue(); } },
                { "useForSubscriberList", n => { UseForSubscriberList = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("archived", Archived);
            writer.WriteDateTimeOffsetValue("created", Created);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteBoolValue("groupAccess", GroupAccess);
            writer.WriteBoolValue("groupAccessRemove", GroupAccessRemove);
            writer.WriteStringValue("groupId", GroupId);
            writer.WriteStringValue("groupRoleId", GroupRoleId);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("imageId", ImageId);
            writer.WriteCollectionOfPrimitiveValues<string>("parentListings", ParentListings);
            writer.WriteEnumValue<global::VRCZ.VRChatApi.Generated.Models.ProductType>("productType", ProductType);
            writer.WriteStringValue("sellerDisplayName", SellerDisplayName);
            writer.WriteStringValue("sellerId", SellerId);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteDateTimeOffsetValue("updated", Updated);
            writer.WriteBoolValue("useForSubscriberList", UseForSubscriberList);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
