// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace VRCZ.VRChatApi.Generated.Models
{
    /// <summary>
    /// Represents a single Transaction, which is likely between VRChat and Steam.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TransactionAgreement : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The agreement property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Agreement { get; set; }
#nullable restore
#else
        public string Agreement { get; set; }
#endif
        /// <summary>The agreementId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AgreementId { get; set; }
#nullable restore
#else
        public string AgreementId { get; set; }
#endif
        /// <summary>The billingType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BillingType { get; set; }
#nullable restore
#else
        public string BillingType { get; set; }
#endif
        /// <summary>The currency property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>The endDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndDate { get; set; }
#nullable restore
#else
        public string EndDate { get; set; }
#endif
        /// <summary>The failedAttempts property</summary>
        public int? FailedAttempts { get; set; }
        /// <summary>The frequency property</summary>
        public int? Frequency { get; set; }
        /// <summary>The itemId property</summary>
        public int? ItemId { get; set; }
        /// <summary>The lastAmount property</summary>
        public double? LastAmount { get; set; }
        /// <summary>The lastAmountVat property</summary>
        public double? LastAmountVat { get; set; }
        /// <summary>The lastPayment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastPayment { get; set; }
#nullable restore
#else
        public string LastPayment { get; set; }
#endif
        /// <summary>The nextPayment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextPayment { get; set; }
#nullable restore
#else
        public string NextPayment { get; set; }
#endif
        /// <summary>The outstanding property</summary>
        public int? Outstanding { get; set; }
        /// <summary>The period property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Period { get; set; }
#nullable restore
#else
        public string Period { get; set; }
#endif
        /// <summary>The recurringAmt property</summary>
        public double? RecurringAmt { get; set; }
        /// <summary>The startDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartDate { get; set; }
#nullable restore
#else
        public string StartDate { get; set; }
#endif
        /// <summary>This is NOT TransactionStatus, but whatever Steam return.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The timeCreated property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeCreated { get; set; }
#nullable restore
#else
        public string TimeCreated { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Models.TransactionAgreement"/> and sets the default values.
        /// </summary>
        public TransactionAgreement()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.TransactionAgreement"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::VRCZ.VRChatApi.Generated.Models.TransactionAgreement CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::VRCZ.VRChatApi.Generated.Models.TransactionAgreement();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "agreement", n => { Agreement = n.GetStringValue(); } },
                { "agreementId", n => { AgreementId = n.GetStringValue(); } },
                { "billingType", n => { BillingType = n.GetStringValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "endDate", n => { EndDate = n.GetStringValue(); } },
                { "failedAttempts", n => { FailedAttempts = n.GetIntValue(); } },
                { "frequency", n => { Frequency = n.GetIntValue(); } },
                { "itemId", n => { ItemId = n.GetIntValue(); } },
                { "lastAmount", n => { LastAmount = n.GetDoubleValue(); } },
                { "lastAmountVat", n => { LastAmountVat = n.GetDoubleValue(); } },
                { "lastPayment", n => { LastPayment = n.GetStringValue(); } },
                { "nextPayment", n => { NextPayment = n.GetStringValue(); } },
                { "outstanding", n => { Outstanding = n.GetIntValue(); } },
                { "period", n => { Period = n.GetStringValue(); } },
                { "recurringAmt", n => { RecurringAmt = n.GetDoubleValue(); } },
                { "startDate", n => { StartDate = n.GetStringValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "timeCreated", n => { TimeCreated = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("agreement", Agreement);
            writer.WriteStringValue("agreementId", AgreementId);
            writer.WriteStringValue("billingType", BillingType);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("endDate", EndDate);
            writer.WriteIntValue("failedAttempts", FailedAttempts);
            writer.WriteIntValue("frequency", Frequency);
            writer.WriteIntValue("itemId", ItemId);
            writer.WriteDoubleValue("lastAmount", LastAmount);
            writer.WriteDoubleValue("lastAmountVat", LastAmountVat);
            writer.WriteStringValue("lastPayment", LastPayment);
            writer.WriteStringValue("nextPayment", NextPayment);
            writer.WriteIntValue("outstanding", Outstanding);
            writer.WriteStringValue("period", Period);
            writer.WriteDoubleValue("recurringAmt", RecurringAmt);
            writer.WriteStringValue("startDate", StartDate);
            writer.WriteStringValue("status", Status);
            writer.WriteStringValue("timeCreated", TimeCreated);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
