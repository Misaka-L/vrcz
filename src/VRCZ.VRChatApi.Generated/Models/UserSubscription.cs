// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace VRCZ.VRChatApi.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UserSubscription : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The active property</summary>
        public bool? Active { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The amount property</summary>
        public double? Amount { get; set; }
        /// <summary>The created_at property</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The expires property</summary>
        public DateTimeOffset? Expires { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The isBulkGift property</summary>
        public bool? IsBulkGift { get; set; }
        /// <summary>The isGift property</summary>
        public bool? IsGift { get; set; }
        /// <summary>The licenseGroups property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? LicenseGroups { get; set; }
#nullable restore
#else
        public List<string> LicenseGroups { get; set; }
#endif
        /// <summary>The period property</summary>
        public global::VRCZ.VRChatApi.Generated.Models.SubscriptionPeriod? Period { get; set; }
        /// <summary>The starts property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Starts { get; set; }
#nullable restore
#else
        public string Starts { get; set; }
#endif
        /// <summary>The status property</summary>
        public global::VRCZ.VRChatApi.Generated.Models.TransactionStatus? Status { get; set; }
        /// <summary>The steamItemId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SteamItemId { get; set; }
#nullable restore
#else
        public string SteamItemId { get; set; }
#endif
        /// <summary>Which &quot;Store&quot; it came from. Right now only Stores are &quot;Steam&quot; and &quot;Admin&quot;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Store { get; set; }
#nullable restore
#else
        public string Store { get; set; }
#endif
        /// <summary>The tier property</summary>
        public int? Tier { get; set; }
        /// <summary>The transactionId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransactionId { get; set; }
#nullable restore
#else
        public string TransactionId { get; set; }
#endif
        /// <summary>The updated_at property</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Models.UserSubscription"/> and sets the default values.
        /// </summary>
        public UserSubscription()
        {
            AdditionalData = new Dictionary<string, object>();
            Period = global::VRCZ.VRChatApi.Generated.Models.SubscriptionPeriod.Month;
            Status = global::VRCZ.VRChatApi.Generated.Models.TransactionStatus.Active;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.UserSubscription"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::VRCZ.VRChatApi.Generated.Models.UserSubscription CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::VRCZ.VRChatApi.Generated.Models.UserSubscription();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "active", n => { Active = n.GetBoolValue(); } },
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "expires", n => { Expires = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "isBulkGift", n => { IsBulkGift = n.GetBoolValue(); } },
                { "isGift", n => { IsGift = n.GetBoolValue(); } },
                { "licenseGroups", n => { LicenseGroups = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "period", n => { Period = n.GetEnumValue<global::VRCZ.VRChatApi.Generated.Models.SubscriptionPeriod>(); } },
                { "starts", n => { Starts = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::VRCZ.VRChatApi.Generated.Models.TransactionStatus>(); } },
                { "steamItemId", n => { SteamItemId = n.GetStringValue(); } },
                { "store", n => { Store = n.GetStringValue(); } },
                { "tier", n => { Tier = n.GetIntValue(); } },
                { "transactionId", n => { TransactionId = n.GetStringValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("active", Active);
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("description", Description);
            writer.WriteDateTimeOffsetValue("expires", Expires);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isBulkGift", IsBulkGift);
            writer.WriteBoolValue("isGift", IsGift);
            writer.WriteCollectionOfPrimitiveValues<string>("licenseGroups", LicenseGroups);
            writer.WriteEnumValue<global::VRCZ.VRChatApi.Generated.Models.SubscriptionPeriod>("period", Period);
            writer.WriteStringValue("starts", Starts);
            writer.WriteEnumValue<global::VRCZ.VRChatApi.Generated.Models.TransactionStatus>("status", Status);
            writer.WriteStringValue("steamItemId", SteamItemId);
            writer.WriteStringValue("store", Store);
            writer.WriteIntValue("tier", Tier);
            writer.WriteStringValue("transactionId", TransactionId);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
