// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace VRCZ.VRChatApi.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class LimitedWorld : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthorId { get; set; }
#nullable restore
#else
        public string AuthorId { get; set; }
#endif
        /// <summary>The authorName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthorName { get; set; }
#nullable restore
#else
        public string AuthorName { get; set; }
#endif
        /// <summary>The capacity property</summary>
        public int? Capacity { get; set; }
        /// <summary>The created_at property</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The favorites property</summary>
        public int? Favorites { get; set; }
        /// <summary>The heat property</summary>
        public int? Heat { get; set; }
        /// <summary>WorldID be &quot;offline&quot; on User profiles if you are not friends with that user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The imageUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageUrl { get; set; }
#nullable restore
#else
        public string ImageUrl { get; set; }
#endif
        /// <summary>The labsPublicationDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LabsPublicationDate { get; set; }
#nullable restore
#else
        public string LabsPublicationDate { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The occupants property</summary>
        public int? Occupants { get; set; }
        /// <summary>The organization property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Organization { get; set; }
#nullable restore
#else
        public string Organization { get; set; }
#endif
        /// <summary>The popularity property</summary>
        public int? Popularity { get; set; }
        /// <summary>The previewYoutubeId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviewYoutubeId { get; set; }
#nullable restore
#else
        public string PreviewYoutubeId { get; set; }
#endif
        /// <summary>The publicationDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PublicationDate { get; set; }
#nullable restore
#else
        public string PublicationDate { get; set; }
#endif
        /// <summary>The recommendedCapacity property</summary>
        public int? RecommendedCapacity { get; set; }
        /// <summary>The releaseStatus property</summary>
        public global::VRCZ.VRChatApi.Generated.Models.ReleaseStatus? ReleaseStatus { get; set; }
        /// <summary> </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The thumbnailImageUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThumbnailImageUrl { get; set; }
#nullable restore
#else
        public string ThumbnailImageUrl { get; set; }
#endif
        /// <summary>The udonProducts property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UdonProducts { get; set; }
#nullable restore
#else
        public List<string> UdonProducts { get; set; }
#endif
        /// <summary> </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::VRCZ.VRChatApi.Generated.Models.LimitedUnityPackage>? UnityPackages { get; set; }
#nullable restore
#else
        public List<global::VRCZ.VRChatApi.Generated.Models.LimitedUnityPackage> UnityPackages { get; set; }
#endif
        /// <summary>The updated_at property</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>The visits property</summary>
        public int? Visits { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.Models.LimitedWorld"/> and sets the default values.
        /// </summary>
        public LimitedWorld()
        {
            AdditionalData = new Dictionary<string, object>();
            Organization = "vrchat";
            ReleaseStatus = global::VRCZ.VRChatApi.Generated.Models.ReleaseStatus.Public;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.Models.LimitedWorld"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::VRCZ.VRChatApi.Generated.Models.LimitedWorld CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::VRCZ.VRChatApi.Generated.Models.LimitedWorld();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authorId", n => { AuthorId = n.GetStringValue(); } },
                { "authorName", n => { AuthorName = n.GetStringValue(); } },
                { "capacity", n => { Capacity = n.GetIntValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "favorites", n => { Favorites = n.GetIntValue(); } },
                { "heat", n => { Heat = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "imageUrl", n => { ImageUrl = n.GetStringValue(); } },
                { "labsPublicationDate", n => { LabsPublicationDate = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "occupants", n => { Occupants = n.GetIntValue(); } },
                { "organization", n => { Organization = n.GetStringValue(); } },
                { "popularity", n => { Popularity = n.GetIntValue(); } },
                { "previewYoutubeId", n => { PreviewYoutubeId = n.GetStringValue(); } },
                { "publicationDate", n => { PublicationDate = n.GetStringValue(); } },
                { "recommendedCapacity", n => { RecommendedCapacity = n.GetIntValue(); } },
                { "releaseStatus", n => { ReleaseStatus = n.GetEnumValue<global::VRCZ.VRChatApi.Generated.Models.ReleaseStatus>(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "thumbnailImageUrl", n => { ThumbnailImageUrl = n.GetStringValue(); } },
                { "udonProducts", n => { UdonProducts = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "unityPackages", n => { UnityPackages = n.GetCollectionOfObjectValues<global::VRCZ.VRChatApi.Generated.Models.LimitedUnityPackage>(global::VRCZ.VRChatApi.Generated.Models.LimitedUnityPackage.CreateFromDiscriminatorValue)?.AsList(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "visits", n => { Visits = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("authorId", AuthorId);
            writer.WriteStringValue("authorName", AuthorName);
            writer.WriteIntValue("capacity", Capacity);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteIntValue("favorites", Favorites);
            writer.WriteIntValue("heat", Heat);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("imageUrl", ImageUrl);
            writer.WriteStringValue("labsPublicationDate", LabsPublicationDate);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("occupants", Occupants);
            writer.WriteStringValue("organization", Organization);
            writer.WriteIntValue("popularity", Popularity);
            writer.WriteStringValue("previewYoutubeId", PreviewYoutubeId);
            writer.WriteStringValue("publicationDate", PublicationDate);
            writer.WriteIntValue("recommendedCapacity", RecommendedCapacity);
            writer.WriteEnumValue<global::VRCZ.VRChatApi.Generated.Models.ReleaseStatus>("releaseStatus", ReleaseStatus);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteStringValue("thumbnailImageUrl", ThumbnailImageUrl);
            writer.WriteCollectionOfPrimitiveValues<string>("udonProducts", UdonProducts);
            writer.WriteCollectionOfObjectValues<global::VRCZ.VRChatApi.Generated.Models.LimitedUnityPackage>("unityPackages", UnityPackages);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteIntValue("visits", Visits);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
