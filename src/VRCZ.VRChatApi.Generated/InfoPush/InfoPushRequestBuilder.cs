// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using VRCZ.VRChatApi.Generated.Models;
namespace VRCZ.VRChatApi.Generated.InfoPush
{
    /// <summary>
    /// Builds and executes requests for operations under \infoPush
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class InfoPushRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.InfoPush.InfoPushRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public InfoPushRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/infoPush{?include*,require*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::VRCZ.VRChatApi.Generated.InfoPush.InfoPushRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public InfoPushRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/infoPush{?include*,require*}", rawUrl)
        {
        }
        /// <summary>
        /// IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.`include` is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an &quot;any of&quot; search.`require` is used to limit what Information Pushes should be included in the response. This is usually used in combination with `include`, and is an &quot;all of&quot; search.
        /// </summary>
        /// <returns>A List&lt;global::VRCZ.VRChatApi.Generated.Models.InfoPush&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::VRCZ.VRChatApi.Generated.Models.InfoPush>?> GetAsync(Action<RequestConfiguration<global::VRCZ.VRChatApi.Generated.InfoPush.InfoPushRequestBuilder.InfoPushRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::VRCZ.VRChatApi.Generated.Models.InfoPush>> GetAsync(Action<RequestConfiguration<global::VRCZ.VRChatApi.Generated.InfoPush.InfoPushRequestBuilder.InfoPushRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::VRCZ.VRChatApi.Generated.Models.InfoPush>(requestInfo, global::VRCZ.VRChatApi.Generated.Models.InfoPush.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.`include` is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an &quot;any of&quot; search.`require` is used to limit what Information Pushes should be included in the response. This is usually used in combination with `include`, and is an &quot;all of&quot; search.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::VRCZ.VRChatApi.Generated.InfoPush.InfoPushRequestBuilder.InfoPushRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::VRCZ.VRChatApi.Generated.InfoPush.InfoPushRequestBuilder.InfoPushRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::VRCZ.VRChatApi.Generated.InfoPush.InfoPushRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::VRCZ.VRChatApi.Generated.InfoPush.InfoPushRequestBuilder WithUrl(string rawUrl)
        {
            return new global::VRCZ.VRChatApi.Generated.InfoPush.InfoPushRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// IPS (Info Push System) is a system for VRChat to push out dynamic information to the client. This is primarily used by the Quick-Menu info banners, but can also be used to e.g. alert you to update your game to the latest version.`include` is used to query what Information Pushes should be included in the response. If include is missing or empty, then no notices will normally be returned. This is an &quot;any of&quot; search.`require` is used to limit what Information Pushes should be included in the response. This is usually used in combination with `include`, and is an &quot;all of&quot; search.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class InfoPushRequestBuilderGetQueryParameters 
        {
            /// <summary>Tags to include (comma-separated). Any of the tags needs to be present.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("include")]
            public string? Include { get; set; }
#nullable restore
#else
            [QueryParameter("include")]
            public string Include { get; set; }
#endif
            /// <summary>Tags to include (comma-separated). All of the tags needs to be present.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("require")]
            public string? Require { get; set; }
#nullable restore
#else
            [QueryParameter("require")]
            public string Require { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class InfoPushRequestBuilderGetRequestConfiguration : RequestConfiguration<global::VRCZ.VRChatApi.Generated.InfoPush.InfoPushRequestBuilder.InfoPushRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
